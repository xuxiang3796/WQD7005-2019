*------------------------------------------------------------*
User:                dante
Date:                May 12, 2019
Time:                23:04:58
Site:                12600285
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                May 12, 2019
Time:                23:04:55
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Repl2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Repl2META;
14717  run;
 
NOTE: There were 13 observations read from the data set EMWS1.REPL2_VARIABLESET.
NOTE: The data set WORK.REPL2META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.Repl2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 5 observations read from the data set WORK.REPL2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15060  *------------------------------------------------------------*;
15061  * Repl2: Generation of macros and macro variables;
15062  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15063  *------------------------------------------------------------*;
 
15064  %let EMEXCEPTIONSTRING=;
15065  *------------------------------------------------------------*;
15066  * TRAIN: Repl2;
15067  *------------------------------------------------------------*;
15068  %let EM_ACTION = TRAIN;
15069  %let syscc = 0;
15070  filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
15071  %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
15073 +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
15075 +   filename macFile catalog 'work.emutil.macro.source';
15076 +   %let _METAOBS = 0;
15077 +   %let _maxvar = &maxvar;
15078 +   %if "&_maxvar" eq "" %then %let maxvar = -1;
15080 +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
15081 +                   or (&metadata eq ) %then %do;
15082 +       %put * No metadata data set defined;
15083 +       %goto doend;
15084 +   %end;
15086 +   data _null_;
15087 +      length _STRING_ $80;
15088 +      retain _STRING_ '' maxvar 0;
15089 +      set &metadata end=eof;
15090 +      file macFile;
15091 +      %if %nrbquote(&where) ne %then %do;
15092 +          %let whereClause = where (%nrbquote(&where));
15093 +          %unquote(&whereClause);
15094 +      %end;
15095 +      if _N_=1 then do;
15096 +         string = "%"!!"macro &name;";
15097 +         put string;
15098 +      end;
15099 +      maxvar +1;
15100 +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
15101 +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
15102 +         if eof
15103 +            %if  %sysevalf(&_maxvar > 0) %then %do;
15104 +                or maxvar >= &maxvar
15105 +            %end;
15106 +            then do;
15107 +            put _STRING_;
15108 +            string = "%"!!"mend &name;";
15109 +            put string;
15110 +            string = strip(put(_N_, best.));
15111 +            call symput('_METAOBS', string);
15112 +            %if (&nummacro ne ) %then %do;
15113 +                put "%" "global &nummacro;";
15114 +                put "%" "let &nummacro = " string ";";
15115 +            %end;
15116 +            stop;
15117 +         end;
15118 +      end;
15119 +      else do;
15120 +         put _STRING_;
15121 +         _string_ = TRIM(&key);
15122 +         if eof
15123 +            %if  %sysevalf(&_maxvar > 0) %then %do;
15124 +              or maxvar >= &maxvar
15125 +           %end;
15126 +            then do;
15127 +            put _STRING_;
15128 +            string = "%"!!"mend &name;";
15129 +            put string;
15130 +        end;
15131 +      end;
15132 +      if eof
15133 +         %if  %sysevalf(&_maxvar > 0) %then %do;
15134 +             or maxvar >= &maxvar
15135 +         %end;
15136 +         then do;
15137 +         string = strip(put(_N_, best.));
15138 +         call symput('_METAOBS', string);
15139 +         %if (&nummacro ne ) %then %do;
15140 +             put "%" "global &nummacro;";
15141 +             put "%" "let &nummacro = " string ";";
15142 +         %end;
15143 +         stop;
15144 +      end;
15145 +   run;
15147 +   %doend:
15148 +   %if ^&_METAOBS %then %do;
15149 +       data _null_;
15150 +          file macFile;
15151 +          put "%" "macro &name;";
15152 +          put "%" "mend &name;";
15153 +          %if (&nummacro ne ) %then %do;
15154 +              put "%" "global &nummacro;";
15155 +              put "%" "let &nummacro = 0;";
15156 +          %end;
15157 +      run;
15158 +   %end;
15159 +   %inc macFile;
15160 +   filename macFile;
15161 +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
15162  filename X;
NOTE: Fileref X has been deassigned.
15163   %macro main;
15164
15165     filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
15166     %include temp;
15167     filename temp;
15168
15169     %if %upcase(&EM_ACTION) = CREATE %then %do;
15170
15171         filename temp catalog 'sashelp.emmdfy.Replace_create.source';
15172         %include temp;
15173         filename temp;
15174         %create;
15175     %end;
15176     %else
15177     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15178
15179         filename temp catalog 'sashelp.emmdfy.Replace_train.source';
15180         %include temp;
15181         filename temp;
15182         %train;
15183     %end;
15184     %else
15185     %if %upcase(&EM_ACTION) = SCORE %then %do;
15186
15187         filename temp catalog 'sashelp.emmdfy.Replace_score.source';
15188         %include temp;
15189         filename temp;
15190         %score;
15191     %end;
15192     %if %upcase(&EM_ACTION) = REPORT %then %do;
15193
15194         filename temp catalog 'sashelp.emmdfy.Replace_report.source';
15195         %include temp;
15196         filename temp;
15197         %report;
15198     %end;
15199     %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
15200         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
15201         %include temp;
15202         filename temp;
15203         %em_replace_openoutclass;
15204     %end;
15205     %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
15206         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
15207         %include temp;
15208         filename temp;
15209         %em_replace_closeoutclass;
15210     %end;
15211  %mend main;
15212
15213  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
15214 +%macro SetProperties;
15215 +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
15216 +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
15217 +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
15218 +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
15219 +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
15220 +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
15221 +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
15222 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
15223 +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
15224 +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
15225 +
15226 +%mend SetProperties;
15227 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_TRAIN.SOURCE.
15228 +%macro getLevels(outData=);
15229 +   %if (%EM_BINARY_TARGET %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET
15230 +       %EM_BINARY_INPUT %EM_ORDINAL_INPUT %EM_NOMINAL_INPUT
15231 +       %EM_BINARY_REJECTED %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED) eq %then %do;
15232 +       data &outData;
15233 +          length NAME $32 LEVEL $8 FREQUENCY 8 TYPE $1 CRAW $8 NRAW 8 REPLACE_VALUE $200;
15234 +          label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
15235 +                LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
15236 +                FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
15237 +                TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
15238 +                CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
15239 +                NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
15240 +                REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
15241 +          stop;
15242 +       run;
15243 +   %end;
15244 +   %else %do;
15245 +       %em_checkmacro(name=EM_TRAIN_MAXLEVELS, global=Y, value=512);
15246 +        %if "&EM_TRAIN_MAXLEVELS" = "" or "&EM_TRAIN_MAXLEVELS" = "." %then
15247 +            %let EM_TRAIN_MAXLEVELS= 512;
15248 +
15249 +        proc dmdb data=&EM_IMPORT_DATA dmdbcat=emdmdb maxlevel=&EM_TRAIN_MAXLEVELS nonorm CLASSOUT=&outData(drop=CODE FREQPERCENT NMISSPERCENT);
15250 +          class
15251 +            %EM_BINARY_TARGET
15252 +            %EM_ORDINAL_TARGET
15253 +            %EM_NOMINAL_TARGET
15254 +            %EM_BINARY_INPUT
15255 +            %EM_ORDINAL_INPUT
15256 +            %EM_NOMINAL_INPUT
15257 +            %EM_BINARY_REJECTED
15258 +            %EM_ORDINAL_REJECTED
15259 +            %EM_NOMINAL_REJECTED;
15260 +          %if (%EM_FREQ ne ) %then %do;
15261 +             freq %EM_FREQ;
15262 +         %end;
15263 +       run;
15264 +   %end;
15265 +%mend getLevels;
15266 +
15267 +%macro makeOutCLass;
15268 +   %em_getname(key=OUTCLASS,  type=DATA);
15269 +   %em_getname(key=NEWVALUES, type=DATA);
15270 +
15271 +   %let data= REPLACE_DATA;
15272 +   %if %sysfunc(exist(&EM_USER_OUTCLASS)) %then %do;
15273 +       data &data(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
15274 +          set &EM_USER_OUTCLASS;
15275 +          keep NAME TYPE LEVEL REPLACE_VALUE;
15276 +          where REPLACE_VALUE ne '';
15277 +       run;
15278 +       proc sort data=&Data;
15279 +          by NAME TYPE LEVEL;
15280 +       run;
15281 +   %end;
15282 +
15283 +   %getLevels(outdata=&EM_USER_OUTCLASS);
15284 +
15285 +   /* Determine Mode */
15286 +   proc sort data=&EM_USER_OUTCLASS;
15287 +      by NAME DESCENDING FREQUENCY;
15288 +   run;
15289 +   data _null_;
15290 +      dsid = open("&EM_USER_OUTCLASS");
15291 +      levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
15292 +      dsid = close(dsid);
15293 +      call symput("levelLen", put(max(levelLen, 9), BEST.));
15294 +   run;
15295 +
15296 +   data &EM_USER_OUTCLASS;
15297 +      length Name $32 LEVEL $&levelLen;
15298 +      set &EM_USER_OUTCLASS;
15299 +      length REPLACE_VALUE $200;
15300 +      label REPLACE_VALUE="%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
15301 +      by NAME;
15302 +      output;
15303 +      if last.name then do;
15304 +         LEVEL="_UNKNOWN_";
15305 +         Frequency=.;
15306 +         CRAW='';
15307 +         NRAW=.;
15308 +         REPLACE_VALUE="_DEFAULT_";
15309 +         output;
15310 +      end;
15311 +   run;
15312 +
15313 +   /* If the file is a copy of an existing one.  Merge previously specified values */
15314 +   %if %sysfunc(exist(&EM_USER_NEWVALUES)) and (&EM_USER_NEWVALUES ne ) %then %do;
15315 +       proc sort data=&EM_USER_NEWVALUES(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
15316 +          by NAME TYPE LEVEL;
15317 +       run;
15318 +       proc sort data=&EM_USER_OUTCLASS;
15319 +          by NAME TYPE LEVEL;
15320 +       run;
15321 +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
15322 +          merge &EM_USER_OUTCLASS(in=_a) &EM_USER_NEWVALUES(in=_b);
15323 +          by NAME TYPE LEVEL;
15324 +          if _a then do;
15325 +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
15326 +             output;
15327 +          end;
15328 +       run;
15329 +       %let lib    = %scan(&EM_USER_NEWVALUES, 1, .);
15330 +       %let member = %scan(&EM_USER_NEWVALUES, 2, .);
15331 +       proc datasets lib=&lib nolist;
15332 +          delete &member;
15333 +       run;
15334 +
15335 +   %end;
15336 +
15337 +   /*  Update the OUTCLASS data using REPLACEMENT values previously specified */
15338 +   %if %sysfunc(exist(&Data)) %then %do;
15339 +       proc sort data=&EM_USER_OUTCLASS;
15340 +          by NAME TYPE LEVEL;
15341 +       run;
15342 +       proc sort data=&data;
15343 +          by NAME TYPE LEVEL;
15344 +       run;
15345 +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
15346 +          merge &EM_USER_OUTCLASS(in=_a) &Data(in=_b);
15347 +          by NAME TYPE LEVEL;
15348 +          if _a then do;
15349 +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
15350 +             output;
15351 +          end;
15352 +       run;
15353 +   %end;
15354 +   proc sort data=&EM_USER_OUTCLASS;
15355 +      by NAME DESCENDING FREQUENCY;
15356 +   run;
15357 +
15358 +   %let lib = WORK;
15359 +   %if %index(&EM_USER_OUTCLASS, .) %then %do;
15360 +       %let lib    = %scan(&EM_USER_OUTCLASS, 1, .);
15361 +       %let member = %scan(&EM_USER_OUTCLASS, 2, .);
15362 +   %end;
15363 +   %else
15364 +       %let member = &EM_USER_OUTCLASS;
15365 +
15366 +   proc datasets lib=&lib nolist;
15367 +      modify &member;
15368 +      label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
15369 +            LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
15370 +            FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
15371 +            TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
15372 +            CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
15373 +            NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
15374 +            REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
15375 +     %if %sysfunc(exist(&data)) %then %do;
15376 +          delete &data;
15377 +     %end;
15378 +   run;
15379 +
15380 +   /* Create property file.  Only the records with non-missing REPLACE_VALUE */
15381 +   data &EM_USER_NEWVALUES / view=&EM_USER_NEWVALUES;
15382 +      set &EM_USER_OUTCLASS(in=_a);
15383 +      where REPLACE_VALUE ne '';
15384 +      keep NAME TYPE LEVEL REPLACE_VALUE;
15385 +   run;
15386 +%mend makeOutClass;
15387 +
15388 +%macro makeVarLimits;
15389 +     %let madsString =;
15390 +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=MADS,     outStat=work.MADS);
15391 +     %if %sysfunc(exist(work.MADS)) %then %do;
15392 +         %makeLimits(StatsDs=work.MADS, cutoff=&EM_PROPERTY_MADSCUTOFF, method=MADS);
15393 +         %let madsString = MADS;
15394 +         proc append base=work.LIMITS data=work.MADS force;
15395 +         run;
15396 +     %end;
15397 +
15398 +     %let spacingString = ;
15399 +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=SPACINGS, outStat=work.SPACINGS);
15400 +     %if %sysfunc(exist(work.SPACINGS)) %then %do;
15401 +         %makeLimits(StatsDs=work.SPACINGS, cutoff=&EM_PROPERTY_SPACINGSCUTOFF, method=SPACINGS);
15402 +         %let spacingString = SPACING;
15403 +         proc append base=work.LIMITS data=work.SPACINGS force;
15404 +         run;
15405 +     %end;
15406 +
15407 +     %let percentString = ;
15408 +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=PERCENTS, outStat=work.PERCENTS);
15409 +     %if %sysfunc(exist(work.PERCENTS)) %then %do;
15410 +         %makePctLimits(StatsDs=work.PERCENTS);
15411 +         %let percentString = PERCENTS;
15412 +         proc append base=work.LIMITS data=work.PERCENTS(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
15413 +         run;
15414 +     %end;
15415 +
15416 +     %makeFixedLimits(StatsDs=work.FIXED);
15417 +     %if %sysfunc(exist(work.FIXED)) %then %do;
15418 +         proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
15419 +         run;
15420 +     %end;
15421 +
15422 +     %if %sysfunc(exist(work.LIMITS)) %then %do;
15423 +         proc sort data=work.LIMITS;
15424 +            by NAME;
15425 +         run;
15426 +         %em_getName(key=LIMITS, type=DATA);
15427 +         data &EM_USER_LIMITS;
15428 +              merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
15429 +              by NAME;
15430 +              if _a then output;
15431 +         run;
15432 +     %end;
15433 +
15434 +
15435 +
15436 +     %if %upcase(&EM_DEBUG)=_ALL_ %then %do;
15437 +          proc print data=&EM_USER_OUTCLASS;run;
15438 +          proc print data=MADS;run;
15439 +          proc print data=spacings;run;
15440 +          proc print data=percents;run;
15441 +          proc print data=limits;run;
15442 +     %end;
15443 +     proc datasets lib=work nolist;
15444 +        delete &madsString &spacingString &percentString limits;
15445 +     run;
15446 +%mend makeVarLimits;
15447 +
15448 +%macro stdize(data=, metadata=, method=, outStat=work.StdizeStat);
15449 +
15450 +    %if &method ne PERCENTS %then %do;
15451 +        %em_varmacro(Name=&method, metadata=&metadata,
15452 +                  where=%nrbquote(CALCMETHOD="&method"));
15453 +    %end;
15454 +    %else %do;
15455 +        %em_varmacro(Name=&method, metadata=&metadata,
15456 +        where=%nrbquote(CALCMETHOD in("STDDEV", "PERCENTS")));
15457 +    %end;
15458 +    %if %&method eq %then %goto doend;
15459 +
15460 +    %let optionString=&method;
15461 +
15462 +    %if &method=MADS %then %let optionString = %nrbquote(method=MAD NORM);
15463 +    %else
15464 +        %if &method=SPACINGS %then %let optionString = %nrbquote(method=spacing(50) NORM);
15465 +        %else
15466 +           %if &method=PERCENTS %then %do;
15467 +               %let uCutoff = %sysevalf(100-&em_property_percentsCutoff);
15468 +               %let optionString = pctlpts=&em_property_PercentsCutoff &uCutoff;
15469 +           %end;
15470 +
15471 +    &em_codebar;
15472 +    * &EM_NODEID: Method &em_property_method;
15473 +    &EM_codebar;
15474 +    proc stdize data=&data outstat=&outstat out=_null_
15475 +       &optionString
15476 +       ;
15477 +       var  %&method;
15478 +       %if %em_freq ne %then %do;
15479 +           freq %em_freq;
15480 +       %end;
15481 +    run;
15482 +
15483 +    %if &method=MADS or &method=SPACINGS %then %do;
15484 +        proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE));
15485 +           where _TYPE_ in('LOCATION', 'SCALE');
15486 +        run;
15487 +    %end;
15488 +    %else
15489 +        %if &method=PERCENTS %then %do;
15490 +            proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE col3=PMin col4=PMax));
15491 +               where _TYPE_ ^in ('ADD', 'MULT', 'N', 'SumFreqsRead', 'SumFreqsUsed', 'NObsRead', 'NObsUsed', 'NObsMiss');
15492 +           run;
15493 +       %end;
15494 +   %doend:
15495 +%mend stdize;
15496 +
15497 +%macro makeLimits(StatsDs=, cutoff=, method=);
15498 +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendm;
15499 +    data &StatsDs;
15500 +       set &StatsDs;
15501 +       length CALCMETHOD $10;
15502 +       retain CALCMETHOD "&METHOD";
15503 +       LowerLimit = location - &cutoff*scale;
15504 +       UpperLimit = location + &cutoff*scale;
15505 +       drop location scale;
15506 +       Label LowerLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
15507 +             UpperLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))";
15508 +    run;
15509 +
15510 +    %doendm:
15511 +%mend makeLimits;
15512 +
15513 +%macro makeFixedLimits(statsDs=);
15514 +    data &statsDs;
15515 +       set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
15516 +       by NAME;
15517 +       select(CALCMETHOD);
15518 +          when('METALIMIT') do;
15519 +             if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
15520 +          end;
15521 +          when('MANUAL') do;
15522 +             if INTERVALMIN eq . and INTERVALMAX eq . then delete;
15523 +             else do;
15524 +                LOWERLIMIT = INTERVALMIN;
15525 +                UPPERLIMIT = INTERVALMAX;
15526 +             end;
15527 +          end;
15528 +          otherwise;
15529 +       end;
15530 +    run;
15531 +    %let nobs=0;
15532 +    %let dsid = %sysfunc(open(&statsDs));
15533 +    %if &dsid>0 %then %do;
15534 +        %let nobs = %sysfunc(attrn(&dsid, NOBS));
15535 +        %let dsid = %sysfunc(close(&dsid));
15536 +    %end;
15537 +    %if ^&nobs %then %do;
15538 +        %let nameDs = %scan(&statsDs, 2, .);
15539 +        proc datasets lib=WORK nolist;
15540 +           delete &nameDs;
15541 +         run;
15542 +    %end;
15543 +
15544 +%mend makeFixedLimits;
15545 +
15546 +%macro makePctLimits(StatsDs=);
15547 +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendp;
15548 +    data &statsDs;
15549 +       merge &statsDs VARIABLESET(where=(CALCMETHOD in('PERCENTS', 'STDDEV')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
15550 +       by NAME;
15551 +       select(CALCMETHOD);
15552 +          when('PERCENTS') do;
15553 +             if PMIN eq . and PMAX eq . then delete;
15554 +             else do;
15555 +                LOWERLIMIT = PMIN;
15556 +                UPPERLIMIT = PMAX;
15557 +             end;
15558 +          end;
15559 +          when('STDDEV') do;
15560 +              LOWERLIMIT = LOCATION - (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
15561 +              UPPERLIMIT = LOCATION + (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
15562 +          end;
15563 +          otherwise;
15564 +       end;
15565 +    run;
15566 +   %doendp:
15567 +%mend makePctLimits;
15568 +
15569 +%macro train;
15570 +
15571 +   %if "&em_import_data" eq "" %then %do;
15572 +       %let emexceptionString = exception.server.IMPORT.NOTRAIN,1;
15573 +       %goto doendm;
15574 +   %end;
15575 +
15576 +    /* Process Class variables */
15577 +    %makeOutClass;
15578 +
15579 +    /* Interval Variables */
15580 +     data VARIABLESET;
15581 +        set &EM_DATA_VARIABLESET(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y")
15582 +             or (ROLE="INPUT" and USE in("Y", "D")) )));
15583 +        if CALCMETHOD eq "DEFAULT" then CALCMETHOD="&EM_PROPERTY_CALCMETHOD";
15584 +        if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
15585 +     run;
15586 +     proc sort data=VARIABLESET out=VARIABLESET;
15587 +        by NAME;
15588 +     run;
15589 +
15590 +     %let varnum=0;
15591 +     %let dsid = %sysfunc(open(VARIABLESET));
15592 +     %if &dsid>0 %then %do;
15593 +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
15594 +         %let dsid = %sysfunc(close(&dsid));
15595 +     %end;
15596 +     %if ^&varnum %then %do;
15597 +          %em_getName(key=LIMITS, type=DATA);
15598 +          %let limitDs = %scan(&em_user_limits, 2, .);
15599 +          proc datasets lib=&em_lib nolist;
15600 +             delete &limitDs;
15601 +          run;
15602 +     %end;
15603 +     %else %do;
15604 +         %makeVarLimits;
15605 +     %end;
15606 +
15607 +   %doendm:
15608 +
15609 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 9 observations read from the data set EMWS1.REPL2_OUTCLASS.
      WHERE REPLACE_VALUE not = ' ';
NOTE: The data set WORK.REPLACE_DATA has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set WORK.REPLACE_DATA has 9 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 135   Memory used = 511K.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 135 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 135 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 13 observations and 6 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 16 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 16 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: There were 9 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 16 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 16 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: MODIFY was successful for EMWS1.REPL2_OUTCLASS.DATA.
 
NOTE: The file EMWS1.REPLACE_DATA (memtype=DATA) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.REPL2_NEWVALUES.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.REPL2_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and ((ROLE in ('REJECTED', 'TARGET') and (USE='Y')) or ((ROLE='INPUT') and USE in ('D', 'Y')));
NOTE: The data set WORK.VARIABLESET has 0 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.VARIABLESET has 0 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file EMWS1.REPL2_LIMITS (memtype=DATA) was not found, but appears on a DELETE statement.
15610  *------------------------------------------------------------*;
15611  * End TRAIN: Repl2;
15612  *------------------------------------------------------------*;
15613
15614  *------------------------------------------------------------*;
15615  * Close any missing semi colons;
15616  *------------------------------------------------------------*;
15617  ;
15618  ;
15619  ;
15620  ;
15621  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
15622  *------------------------------------------------------------*;
15623  * Close any unbalanced quotes;
15624  *------------------------------------------------------------*;
15625  /*; *"; *'; */
15626  ;
15627  run;
15628  quit;
15629  /* Reset EM Options */
15630  options formchar="|----|+|---+=|-/\<>*";
15631  options nocenter ls=256 ps=10000;
15632  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                May 12, 2019
Time:                23:04:56
*------------------------------------------------------------*
15734  %let EMEXCEPTIONSTRING=;
15735  *------------------------------------------------------------*;
15736  * SCORE: Repl2;
15737  *------------------------------------------------------------*;
15738  %let EM_ACTION = SCORE;
15739  %let syscc = 0;
15740  filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
15741  %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
15743 +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
15745 +   filename macFile catalog 'work.emutil.macro.source';
15746 +   %let _METAOBS = 0;
15747 +   %let _maxvar = &maxvar;
15748 +   %if "&_maxvar" eq "" %then %let maxvar = -1;
15750 +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
15751 +                   or (&metadata eq ) %then %do;
15752 +       %put * No metadata data set defined;
15753 +       %goto doend;
15754 +   %end;
15756 +   data _null_;
15757 +      length _STRING_ $80;
15758 +      retain _STRING_ '' maxvar 0;
15759 +      set &metadata end=eof;
15760 +      file macFile;
15761 +      %if %nrbquote(&where) ne %then %do;
15762 +          %let whereClause = where (%nrbquote(&where));
15763 +          %unquote(&whereClause);
15764 +      %end;
15765 +      if _N_=1 then do;
15766 +         string = "%"!!"macro &name;";
15767 +         put string;
15768 +      end;
15769 +      maxvar +1;
15770 +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
15771 +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
15772 +         if eof
15773 +            %if  %sysevalf(&_maxvar > 0) %then %do;
15774 +                or maxvar >= &maxvar
15775 +            %end;
15776 +            then do;
15777 +            put _STRING_;
15778 +            string = "%"!!"mend &name;";
15779 +            put string;
15780 +            string = strip(put(_N_, best.));
15781 +            call symput('_METAOBS', string);
15782 +            %if (&nummacro ne ) %then %do;
15783 +                put "%" "global &nummacro;";
15784 +                put "%" "let &nummacro = " string ";";
15785 +            %end;
15786 +            stop;
15787 +         end;
15788 +      end;
15789 +      else do;
15790 +         put _STRING_;
15791 +         _string_ = TRIM(&key);
15792 +         if eof
15793 +            %if  %sysevalf(&_maxvar > 0) %then %do;
15794 +              or maxvar >= &maxvar
15795 +           %end;
15796 +            then do;
15797 +            put _STRING_;
15798 +            string = "%"!!"mend &name;";
15799 +            put string;
15800 +        end;
15801 +      end;
15802 +      if eof
15803 +         %if  %sysevalf(&_maxvar > 0) %then %do;
15804 +             or maxvar >= &maxvar
15805 +         %end;
15806 +         then do;
15807 +         string = strip(put(_N_, best.));
15808 +         call symput('_METAOBS', string);
15809 +         %if (&nummacro ne ) %then %do;
15810 +             put "%" "global &nummacro;";
15811 +             put "%" "let &nummacro = " string ";";
15812 +         %end;
15813 +         stop;
15814 +      end;
15815 +   run;
15817 +   %doend:
15818 +   %if ^&_METAOBS %then %do;
15819 +       data _null_;
15820 +          file macFile;
15821 +          put "%" "macro &name;";
15822 +          put "%" "mend &name;";
15823 +          %if (&nummacro ne ) %then %do;
15824 +              put "%" "global &nummacro;";
15825 +              put "%" "let &nummacro = 0;";
15826 +          %end;
15827 +      run;
15828 +   %end;
15829 +   %inc macFile;
15830 +   filename macFile;
15831 +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
15832  filename X;
NOTE: Fileref X has been deassigned.
15833   %macro main;
15834
15835     filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
15836     %include temp;
15837     filename temp;
15838
15839     %if %upcase(&EM_ACTION) = CREATE %then %do;
15840
15841         filename temp catalog 'sashelp.emmdfy.Replace_create.source';
15842         %include temp;
15843         filename temp;
15844         %create;
15845     %end;
15846     %else
15847     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15848
15849         filename temp catalog 'sashelp.emmdfy.Replace_train.source';
15850         %include temp;
15851         filename temp;
15852         %train;
15853     %end;
15854     %else
15855     %if %upcase(&EM_ACTION) = SCORE %then %do;
15856
15857         filename temp catalog 'sashelp.emmdfy.Replace_score.source';
15858         %include temp;
15859         filename temp;
15860         %score;
15861     %end;
15862     %if %upcase(&EM_ACTION) = REPORT %then %do;
15863
15864         filename temp catalog 'sashelp.emmdfy.Replace_report.source';
15865         %include temp;
15866         filename temp;
15867         %report;
15868     %end;
15869     %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
15870         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
15871         %include temp;
15872         filename temp;
15873         %em_replace_openoutclass;
15874     %end;
15875     %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
15876         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
15877         %include temp;
15878         filename temp;
15879         %em_replace_closeoutclass;
15880     %end;
15881  %mend main;
15882
15883  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
15884 +%macro SetProperties;
15885 +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
15886 +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
15887 +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
15888 +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
15889 +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
15890 +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
15891 +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
15892 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
15893 +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
15894 +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
15895 +
15896 +%mend SetProperties;
15897 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_SCORE.SOURCE.
15898 +%macro makeLevelData(data=, outclass=);
15899 +   data REPLACE_MODE;
15900 +      set &OUTCLASS;
15901 +      by NAME;
15902 +      if first.name then do;
15903 +         MODEC    = CRAW;
15904 +         MODEN    = NRAW;
15905 +         NORMMODE = LEVEL;
15906 +         output;
15907 +      end;
15908 +      keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
15909 +   run;
15910 +
15911 +   proc sort data=&EM_DATA_VARIABLESET;
15912 +      by NAME;
15913 +   run;
15914 +   data &data;
15915 +      length UNKWOWNDEFAULT $8;
15916 +      merge &OUTCLASS(in=_a) REPLACE_MODE &EM_DATA_VARIABLESET(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
15917 +      by NAME;
15918 +      if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "&EM_PROPERTY_UNKNOWNLEVEL";
15919 +      if _a then output;
15920 +   run;
15921 +   proc datasets lib=work nolist;
15922 +      delete REPLACE_MODE;
15923 +   run;
15924 +   quit;
15925 +%mend makeLevelData;
15926 +
15927 +%macro makeNewNames(limitDs=, classValue=, className=);
15928 +     %let varname = invarname;
15929 +     %let newname = outname;
15930 +     proc sort data=&classValue out=&varname nodupkey;
15931 +        by NAME;
15932 +        where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
15933 +     run;
15934 +     %let classnum=0;
15935 +     %let dsid = %sysfunc(open(&varname));
15936 +     %if &dsid>0 %then %do;
15937 +         %let classnum = %sysfunc(attrn(&dsid, NOBS));
15938 +         %let dsid = %sysfunc(close(&dsid));
15939 +     %end;
15940 +
15941 +     %let varnum=0;
15942 +     %let dsid = %sysfunc(open(&LimitDs));
15943 +     %if &dsid>0 %then %do;
15944 +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
15945 +         %let dsid = %sysfunc(close(&dsid));
15946 +     %end;
15947 +
15948 +     %if ^&classnum and ^&varnum and ^%sysfunc(exist(&classname)) %then %do;
15949 +         %let lib    = %scan(&classname, 1, .);
15950 +         %let member = %scan(&classname, 2, .);
15951 +          proc datasets lib=&lib nolist;
15952 +             delete &member;
15953 +          run;
15954 +          quit;
15955 +         %goto doendmn;
15956 +     %end;
15957 +
15958 +     data &varname;
15959 +        set
15960 +        %if &classnum %then %do;
15961 +            &varname(keep=NAME)
15962 +        %end;
15963 +        %if &varnum %then %do;
15964 +            &limitDs(keep=NAME)
15965 +        %end;
15966 +        ;
15967 +     run;
15968 +     proc dmdb data=&varname outtable=&newname(rename=(REP=NEWNAME)) nameserver;
15969 +        names NAME;
15970 +        prefix REP_;
15971 +     run;
15972 +     proc sort data=&newname;
15973 +        by NAME;
15974 +     run;
15975 +
15976 +     /* Merge the new names with the limits data set */
15977 +     %if %sysfunc(exist(&limitDs)) %then %do;
15978 +         data &limitDs;
15979 +            merge &newname &limitDs(in=a);
15980 +            by NAME;
15981 +            if a then output;
15982 +         run;
15983 +
15984 +         %let lib    = %scan(&limitDs, 1, .);
15985 +         %let member = %scan(&limitDs, 2, .);
15986 +          proc datasets lib=&lib nolist;
15987 +             modify &member;
15988 +             label NAME    =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
15989 +              NEWNAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_replacevar_vlabel, NOQUOTE))"
15990 +              CALCMETHOD =  "%sysfunc(sasmsg(sashelp.dmine, rpt_calcmethod_vlabel , NOQUOTE))"
15991 +              REPLACEMETHODUSED =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethodused_vlabel, NOQUOTE))"
15992 +              LOWERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
15993 +              REPLACEMINUSED    =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
15994 +              UPPERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))"
15995 +              REPLACEDMAXUSED   =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))"
15996 +              REPLACEMETHOD     =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
15997 +              REPLACEMIN =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemin_vlabel, NOQUOTE))"
15998 +              REPLACEMAX =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemax_vlabel, NOQUOTE))"
15999 +              ROLE       =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
16000 +              LEVEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
16001 +              LABEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
16002 +         run;
16003 +         quit;
16004 +     %end;
16005 +
16006 +     /* Merge the new names with the Class Value data set */
16007 +     %if %sysfunc(exist(&classValue)) %then %do;
16008 +         data length;
16009 +            retain newlen 0;
16010 +            set &classValue;
16011 +            by NAME;
16012 +            if type eq 'C' then do;
16013 +               if first.name then do;
16014 +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
16015 +                     newlen = max(length, length(strip(replace_value)));
16016 +                  else
16017 +                     newlen = length;
16018 +               end;
16019 +               else do;
16020 +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
16021 +                     newlen = max(newlen, length(strip(replace_value)));
16022 +               end;
16023 +            end;
16024 +            else newlen = length;
16025 +            len=length;
16026 +            if last.name then output;
16027 +            keep name len newlen role format type label mlevel;
16028 +         run;
16029 +         data &className;
16030 +            length rformat formatroot $32;
16031 +            merge &newname(in=a) length(in=b);
16032 +            by NAME;
16033 +            length=len;
16034 +            if newlen > len then do;
16035 +               if type eq 'C' and format ne '' then do;
16036 +                  rformat = strip(reverse(format));
16037 +                  do while(indexc(rformat, '.0123456789')=1);
16038 +                     rformat = substr(rformat, 2);
16039 +                  end;
16040 +                  formatroot= upcase(reverse(rformat));
16041 +                  if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
16042 +                     format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
16043 +                  end;
16044 +               end;
16045 +               length = newlen;
16046 +            end;
16047 +            if a and b then output;
16048 +            KEEP name newname role format mlevel type label length;
16049 +         run;
16050 +     %end;
16051 +
16052 +     proc datasets lib=work nolist;
16053 +        delete length &varname &newname;
16054 +     run;
16055 +     quit;
16056 +
16057 +     %doendmn:
16058 +
16059 +%mend makeNewNames;
16060 +
16061 +%macro makeVarDeltaCode(LimitDs=);
16062 +    %if ^%sysfunc(exist(&LimitDs)) %then %goto doendd;
16063 +
16064 +    filename _F1 "&EM_FILE_CDELTA_TRAIN";
16065 +     data _null_;
16066 +        set &LimitDs end=eof;
16067 +        length string $400;
16068 +        file _F1;
16069 +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
16070 +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
16071 +        %end;
16072 +        %else %do;
16073 +            string = 'if NAME="'!!strip(NAME)!!'" then do;';        put string;
16074 +            string = '   ROLE="REJECTED";';                         put string;
16075 +            string = '   COMMENT= "Replaced by '!!"&EM_NODEID"!!'";'; put string;
16076 +            string = 'end;';                                        put string;
16077 +        %end;
16078 +        put 'else';
16079 +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
16080 +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
16081 +        string = '      LEVEL="'!!strip(LEVEL)!!'";';          put string;
16082 +        put      'end;';
16083 +        if ^eof then
16084 +           put 'else';
16085 +   run;
16086 +   filename _F1;
16087 +
16088 +    %doendd:
16089 +%mend makeVarDeltaCode;
16090 +
16091 +%macro makeVarScoreCode(LimitDs=, File=);
16092 +    %if ^%sysfunc(exist(&LimitDs)) or "&File" eq "" %then %goto doendm;
16093 +
16094 +     filename sFile "&file";
16095 +     data &LimitDs;
16096 +        set &LimitDs end=eof;
16097 +        length REPLACEMETHODUSED $8 string $400;
16098 +        file sFile;
16099 +        put'* ;';
16100 +        put'* Variable: ' name ';';
16101 +        put '* ;';
16102 +        if strip(label) = '' then label = name;
16103 +        string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
16104 +        put string;
16105 +        put newname '=' name ';';
16106 +        REPLACEMETHODUSED = REPLACEMETHOD;
16107 +        if REPLACEMETHOD = 'DEFAULT' then
16108 +            %if "&EM_PROPERTY_REPLACEMETHOD" = "COMPUTED" %then %do;
16109 +                REPLACEMETHODUSED = 'COMPUTED';
16110 +            %end;
16111 +            %else
16112 +            %if "&EM_PROPERTY_REPLACEMETHOD" = "MISSING" %then %do;
16113 +                REPLACEMETHODUSED = 'MISSING';
16114 +            %end;
16115 +            %else %do;
16116 +                REPLACEMETHODUSED = 'MANUAL';
16117 +            %end;
16118 +
16119 +        put 'if ' name ' eq . then ' newname  '= . ;';
16120 +        if LowerLimit ne . then do;
16121 +           select(REPLACEMETHODUSED);
16122 +              when('COMPUTED') REPLACEMINUSED = lowerLimit;
16123 +              when('MISSING')  REPLACEMINUSED = .;
16124 +              when('MANUAL')   REPLACEMINUSED = replaceMin;
16125 +              otherwise;
16126 +           end;
16127 +           put 'else';
16128 +           put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
16129 +        end;
16130 +        if upperLimit ne . then do;
16131 +           select(REPLACEMETHODUSED);
16132 +              when('COMPUTED') REPLACEMAXUSED = upperLimit;
16133 +              when('MISSING')  REPLACEMAXUSED = .;
16134 +              when('MANUAL')   REPLACEMAXUSED = replaceMax;
16135 +              otherwise;
16136 +           end;
16137 +           put 'else';
16138 +           put 'if ' name '>' upperLimit  ' then ' newname ' = ' REPLACEMAXUSED ';';
16139 +        end;
16140 +        drop string;
16141 +    run;
16142 +    filename sfile;
16143 +    %doendm:
16144 +%mend makeVarScoreCode;
16145 +
16146 +
16147 +%macro makeUnknownOptCode(Folder=, Data=);
16148 +    %if ^%sysfunc(exist(&Data)) %then %goto doendu;
16149 +
16150 +    %let dsid = %sysfunc(open(&data));
16151 +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
16152 +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
16153 +
16154 +    %let oldname=;
16155 +    %do %while(^%sysfunc(fetch(&dsid)));
16156 +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
16157 +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
16158 +
16159 +        %if &name ne &oldname %then %do;
16160 +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
16161 +            data _null_;
16162 +               set &Data end=eof;
16163 +               where NAME ="&name";
16164 +               length string $400;
16165 +               length newlevel replaceLevel $400;
16166 +               retain string missingFlag;
16167 +               file _F1;
16168 +               if _N_=1 then do;
16169 +                  put '*;';
16170 +                  if format ne '' then do;
16171 +                     string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
16172 +                     put string;
16173 +                     put 'if ^(_UFORMAT200 in(';
16174 +                  end;
16175 +                  else do;
16176 +                     if type eq 'C' then do;
16177 +                        string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
16178 +                        put string;
16179 +                        put 'if ^(_UFORMAT200 in(';
16180 +                     end;
16181 +                     else
16182 +                        put 'if (';
16183 +                  end;
16184 +                  string='';
16185 +                  missingFlag = 0;
16186 +               end;
16187 +
16188 +               if ^eof and LEVEL ne '_UNKNOWN_' then do;
16189 +                  if format ne '' or type eq 'C' then do;
16190 +                     newlevel = tranwrd(strip(LEVEL),'"','""');
16191 +                     if strip(newLevel) = '' then missingFlag = 1;
16192 +                     if length(strip(newlevel))+length(strip(string))+4<80 then do;
16193 +                        if string='' then
16194 +                           string = strip(string)!!' "'!!strip(newlevel)!!'" ';
16195 +                        else
16196 +                           string = strip(string)!!', "'!!strip(newlevel)!!'" ';
16197 +                     end;
16198 +                     else do;
16199 +                        put string;
16200 +                        string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
16201 +                     end;
16202 +                  end;
16203 +                  else do;
16204 +                     string = strip(name)!!' ne '!!strip(level)!!' and ';
16205 +                     put string;
16206 +                  end;
16207 +                  newlevel = ' ';
16208 +               end;
16209 +               else do;
16210 +                  if format ne '' or type eq 'C' then do;
16211 +                     put string;
16212 +                     if ^missingFlag then
16213 +                        string = ', "" )) then ';
16214 +                     else
16215 +                        string = ')) then ';
16216 +                  end;
16217 +                  else
16218 +                     string = strip(name)!!' ne . ) then ';
16219 +                  put string;
16220 +
16221 +                 select(REPLACE_VALUE);
16222 +                 when('_MODE_') do;
16223 +                    if type eq 'C' then
16224 +                       replaceLevel = NORMMODE;
16225 +                    else
16226 +                       replaceLevel =strip(put(MODEN,BEST.));
16227 +                 end;
16228 +                 when('_MISSING_') do;
16229 +                    if type eq 'C' then replaceLevel = '';
16230 +                    else replaceLevel = '.';
16231 +                 end;
16232 +                 when('_DEFAULT_') do;
16233 +                    %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
16234 +                        if type eq 'C' then
16235 +                           replaceLevel = NORMMODE;
16236 +                        else
16237 +                           replaceLevel = strip(put(MODEN,BEST.));
16238 +                    %end;
16239 +                    %else %do;
16240 +                        if type eq 'C' then replaceLevel = '';
16241 +                         else replaceLevel = '.';
16242 +                    %end;
16243 +                  end;
16244 +                  when('') do;
16245 +                  end;
16246 +                  otherwise do;
16247 +                     if type eq 'C' then replaceLevel= replace_Value;
16248 +                     else replaceLevel = replace_Value;
16249 +                  end;
16250 +               end;
16251 +               if type eq 'C' then do;
16252 +                  string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
16253 +               end;
16254 +               else do;
16255 +                  string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
16256 +               end;
16257 +               put string;
16258 +            end;
16259 +
16260 +           run;
16261 +           filename _F1;
16262 +           proc datasets lib=work nolist;
16263 +              delete _temp;
16264 +           run;
16265 +           quit;
16266 +
16267 +           %let oldname = &name;
16268 +        %end;
16269 +    %end;
16270 +    %let dsid = %sysfunc(close(&dsid));
16271 +
16272 +    %doendu:
16273 +%mend makeUnknownOptCode;
16274 +
16275 +%macro makeUnknownCode(ScoreFile=, Data=);
16276 +   %if ^%sysfunc(exist(&Data)) %then %goto doendm;
16277 +
16278 +   filename _F1 "&ScoreFile" MOD;
16279 +   data _null_;
16280 +      set &Data;
16281 +      length string $400;
16282 +      length newlevel replaceLevel $200;
16283 +      retain string missingFlag;
16284 +      file _F1;
16285 +      by NAME;
16286 +
16287 +      if _N_=1 then do;
16288 +         put '* ;';
16289 +         put '* Replace Unknown Class Levels ;';
16290 +         put '* ;';
16291 +         put 'length _UFORMAT200 $200;';
16292 +         put 'drop   _UFORMAT200;';
16293 +         put '_UFORMAT200 = " ";';
16294 +      end;
16295 +
16296 +      if first.name then do;
16297 +         missingFlag = 0;
16298 +         put '*;';
16299 +
16300 +         if format ne '' then do;
16301 +            call symput('UFormatFlag', '1');
16302 +            string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
16303 +            put string;
16304 +            put 'if ^(_UFORMAT200 in(';
16305 +         end;
16306 +         else do;
16307 +            if type eq 'C' then do;
16308 +               call symput('UFormatFlag', '1');
16309 +               string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
16310 +               put string;
16311 +               put 'if ^(_UFORMAT200 in(';
16312 +            end;
16313 +            else
16314 +               put 'if (';
16315 +         end;
16316 +         string='';
16317 +      end;
16318 +
16319 +      if ^last.name and LEVEL ne '_UNKNOWN_' then do;
16320 +        if format ne '' or type eq 'C' then do;
16321 +           newlevel = tranwrd(strip(LEVEL),'"','""');
16322 +           if strip(newLevel) = '' then missingFlag = 1;
16323 +           if length(strip(newlevel))+length(strip(string))+4<80 then do;
16324 +              if string='' then
16325 +                 string = strip(string)!!' "'!!strip(newlevel)!!'" ';
16326 +              else
16327 +                 string = strip(string)!!', "'!!strip(newlevel)!!'" ';
16328 +           end;
16329 +           else do;
16330 +              put string;
16331 +              string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
16332 +           end;
16333 +        end;
16334 +        else do;
16335 +           string = strip(name)!!' ne '!!strip(level)!!' and ';
16336 +           put string;
16337 +        end;
16338 +        newlevel = ' ';
16339 +     end;
16340 +     else do;
16341 +        if format ne '' or type eq 'C' then do;
16342 +           put string;
16343 +           if ^missingFlag then
16344 +              string = ', "" )) then ';
16345 +           else
16346 +              string = ')) then ';
16347 +        end;
16348 +        else
16349 +           string = strip(name)!!' ne . ) then ';
16350 +        put string;
16351 +
16352 +        select(REPLACE_VALUE);
16353 +           when('_MODE_') do;
16354 +              if type eq 'C' then
16355 +                 replaceLevel = NORMMODE;
16356 +              else
16357 +                 replaceLevel =strip(put(MODEN,BEST.));
16358 +           end;
16359 +           when('_MISSING_') do;
16360 +              if type eq 'C' then replaceLevel = '';
16361 +              else replaceLevel = '.';
16362 +           end;
16363 +           when('_DEFAULT_') do;
16364 +              %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
16365 +                  if type eq 'C' then
16366 +                     replaceLevel = NORMMODE;
16367 +                  else
16368 +                     replaceLevel = strip(put(MODEN,BEST.));
16369 +              %end;
16370 +              %else %do;
16371 +                  if type eq 'C' then replaceLevel = '';
16372 +                  else replaceLevel = '.';
16373 +              %end;
16374 +           end;
16375 +           when('') do;
16376 +           end;
16377 +           otherwise do;
16378 +               if type eq 'C' then replaceLevel= replace_Value;
16379 +               else replaceLevel = replace_Value;
16380 +           end;
16381 +        end;
16382 +        if type eq 'C' then do;
16383 +           string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
16384 +        end;
16385 +        else do;
16386 +           string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
16387 +        end;
16388 +        put string;
16389 +     end;
16390 +
16391 +     run;
16392 +     filename _F1;
16393 +    %doendm:
16394 +%mend makeUnknownCode;
16395 +
16396 +%macro makeReplaceCode(ScoreFile=, Data=);
16397 +   filename _F1 "&ScoreFile"  MOD;
16398 +   data _null_;
16399 +      length string $400;
16400 +      set &data end=eof;
16401 +      file _F1;
16402 +      by NAME;
16403 +      if _N_=1 then do;
16404 +         put '   ';
16405 +         put '* ;';
16406 +         put '* Replace Specific Class Levels ;';
16407 +         put '* ;';
16408 +         put 'length _UFormat200 $200;';
16409 +         put 'drop   _UFORMAT200;';
16410 +         put '_UFORMAT200 = " ";';
16411 +      end;
16412 +      if first.name then do;
16413 +         put '* ;';
16414 +         string = '* Variable: '!!strip(NAME)!!';';
16415 +         put string;
16416 +         put '* ;';
16417 +         if format ne '' then do;
16418 +            call symput('UFormatFlag', '1');
16419 +            string = "_UFORMAT200 = strip("; put string;
16420 +            string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
16421 +            put string;
16422 +         end;
16423 +         else
16424 +           if type eq 'C' then do;
16425 +              call symput('UFormatFlag', '1');
16426 +              string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
16427 +              put string;
16428 +           end;
16429 +      end;
16430 +      if ^first.name then
16431 +         put 'else';
16432 +      if format ne '' then do;
16433 +         string = tranwrd(strip(LEVEL),'"','""');
16434 +         string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
16435 +         put string;
16436 +      end;
16437 +      else do;
16438 +         if type eq 'N' then do;
16439 +            string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
16440 +            put string;
16441 +         end;
16442 +         else do;
16443 +            string = tranwrd(strip(craw),'"','""');
16444 +            string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
16445 +            put string;
16446 +         end;
16447 +      end;
16448 +      string = strip(newname)!!'=';
16449 +      if type eq 'C' then do;
16450 +         if upcase(replace_value) eq '_MISSING_' or
16451 +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
16452 +         else
16453 +           if upcase(replace_value) eq '_MODE_' or
16454 +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
16455 +            then replace_Value =modec;
16456 +           string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
16457 +      end;
16458 +      else do;
16459 +         if upcase(replace_value) eq '_MISSING_' or
16460 +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
16461 +         else
16462 +           if upcase(replace_value) eq '_MODE_' or
16463 +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
16464 +                  replace_Value =strip(put(moden, BEST.));
16465 +
16466 +         string = strip(string)!!''!!strip(replace_value)!!';';
16467 +      end;
16468 +      put string;
16469 +    run;
16470 +    filename _F1;
16471 +
16472 +%mend makeReplaceCode;
16473 +
16474 +%macro makeReplaceOptCode(Folder=, Data=);
16475 +    %if ^%sysfunc(exist(&Data)) %then %goto doendr;
16476 +
16477 +    %let dsid = %sysfunc(open(&data));
16478 +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
16479 +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
16480 +
16481 +    %let oldname=;
16482 +    %do %while(^%sysfunc(fetch(&dsid)));
16483 +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
16484 +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
16485 +
16486 +        %if &name ne &oldname %then %do;
16487 +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
16488 +            data _null_;
16489 +               length string $400;
16490 +               set &Data end=eof;
16491 +               by NAME;
16492 +               where NAME ="&name";
16493 +               file _F1;
16494 +               if _N_=1 then do;
16495 +                  put '* ;';
16496 +                  string = '* Variable: '!!strip(NAME)!!';';
16497 +                  put string;
16498 +                  put '* ;';
16499 +                  if format ne '' then do;
16500 +                     string = "_UFORMAT200 = strip("; put string;
16501 +                     string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
16502 +                     put string;
16503 +                  end;
16504 +                  else
16505 +                     if type eq 'C' then do;
16506 +                        call symput('UFormatFlag', '1');
16507 +                        string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
16508 +                        put string;
16509 +                    end;
16510 +               end;
16511 +               if ^first.name then
16512 +                  put 'else';
16513 +               if format ne '' then do;
16514 +                  string = tranwrd(strip(LEVEL),'"','""');
16515 +                  string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
16516 +                  put string;
16517 +               end;
16518 +               else do;
16519 +                  if type eq 'N' then do;
16520 +                     string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
16521 +                     put string;
16522 +                  end;
16523 +                  else do;
16524 +                     string = tranwrd(strip(craw),'"','""');
16525 +                     string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
16526 +                     put string;
16527 +                  end;
16528 +               end;
16529 +               string = strip(newname)!!'=';
16530 +               if type eq 'C' then do;
16531 +                  if upcase(replace_value) eq '_MISSING_' or
16532 +                     (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
16533 +                  else
16534 +                     if upcase(replace_value) eq '_MODE_' or
16535 +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
16536 +                       then replace_Value =modec;
16537 +                          string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
16538 +               end;
16539 +              else do;
16540 +                 if upcase(replace_value) eq '_MISSING_' or
16541 +                    (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
16542 +                 else
16543 +                    if upcase(replace_value) eq '_MODE_' or
16544 +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
16545 +                        replace_Value =strip(put(moden, BEST.));
16546 +
16547 +                 string = strip(string)!!''!!strip(replace_value)!!';';
16548 +              end;
16549 +             put string;
16550 +          run;
16551 +          filename _F1;
16552 +
16553 +           %let oldname = &name;
16554 +        %end;
16555 +    %end;
16556 +    %let dsid = %sysfunc(close(&dsid));
16557 +
16558 +    %doendr:
16559 +
16560 +%mend makeReplaceOptCode;
16561 +
16562 +
16563 +%macro makeNewVarCode(ScoreFile=, Data=);
16564 +   filename _F1 "&ScoreFile"  MOD;
16565 +   data _null_;
16566 +     length string $400;
16567 +      set &data end=eof;
16568 +      file _F1;
16569 +      if _N_=1 then do;
16570 +         put '   ';
16571 +         put '* ;';
16572 +         put '* Defining New Variables;';
16573 +         put '* ;';
16574 +      end;
16575 +      if type eq 'C' then do;
16576 +         string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
16577 +         put string;
16578 +      end;
16579 +      if strip(label) = '' then label = name;
16580 +      string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
16581 +      put string;
16582 +
16583 +      if format ne '' then do;
16584 +         string ='format '!!strip(newname)!!' '!!strip(format)!!';';
16585 +         put string;
16586 +      end;
16587 +      string = strip(newname)!!'= '!!strip(NAME)!!';';
16588 +      put string;
16589 +   run;
16590 +%mend makeNewVarCode;
16591 +
16592 +%macro makeNewVarOptCode(Folder=, Data=);
16593 +    %if ^%sysfunc(exist(&data)) or "&Folder" eq "" %then %goto doendo;
16594 +    data _temp_;set &data;run;
16595 +    %let dsid = %sysfunc(open(_temp_));
16596 +    %let nobs  = %sysfunc(attrn(&dsid, NLOBS));
16597 +    %do %while(^%sysfunc(fetch(&dsid)));
16598 +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
16599 +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
16600 +
16601 +        filename _F1 "&Folder.&em_dsep.&newname..sas";
16602 +        data _null_;
16603 +           length string $400;
16604 +           set &data;
16605 +           where NEWNAME="&newname";
16606 +           file _F1;
16607 +           put '   ';
16608 +           put '* ;';
16609 +           put "* Defining: &newname;";
16610 +           put '* ;';
16611 +           if type eq 'C' then  do;
16612 +              string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
16613 +              put string;
16614 +           end;
16615 +           if strip(label) = '' then label = name;
16616 +           string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
16617 +           put string;
16618 +           if format ne '' then do;
16619 +              string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
16620 +              put string;
16621 +           end;
16622 +           string = strip(newname)!!'='!!strip(name)!!';';
16623 +           put string;
16624 +        run;
16625 +    %end;
16626 +    %let dsid = %sysfunc(close(&dsid));
16627 +   %doendo:
16628 +%mend makeNewVarOptCode;
16629 +
16630 +%macro makeClassScoreCode(LevelData=, nameData=_newNames);
16631 +   %let UFormatFlag = 0;
16632 +
16633 +   %em_register(key=REPLACECODE, type=FOLDER);
16634 +
16635 +   /* Generating New Variable Score Code */
16636 +   %makeNewVarCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE,  Data=&nameData);
16637 +
16638 +   data _tempNewVars;
16639 +      set &nameData;
16640 +      where ROLE ne 'TARGET';
16641 +   run;
16642 +   %makeNewVarCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_tempNewVars);
16643 +   %makeNewVarOptCode(Folder=&em_user_replacecode, Data=_tempNewVars);
16644 +
16645 +   proc datasets lib=WORK nolist;
16646 +      delete _tempNewVars;
16647 +   run;
16648 +   quit;
16649 +
16650 +   /* Generating Publish Score Code */
16651 +   data _temp;
16652 +      set &LevelData;
16653 +      where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
16654 +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
16655 +      keep NAME;
16656 +   run;
16657 +
16658 +   data _temp;
16659 +      merge _temp(in=_a) &Leveldata &nameData;
16660 +      by NAME;
16661 +      if _a then output;
16662 +   run;
16663 +
16664 +   %makeUnknownCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
16665 +   %makeUnknownOptCode(Folder=&em_user_replacecode,        Data=_temp);
16666 +   proc datasets lib=work nolist;
16667 +      delete _temp;
16668 +   run;
16669 +   quit;
16670 +
16671 +   data _temp;
16672 +      merge &LevelData(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and
16673 +        (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) ))  &nameData;
16674 +      by NAME;
16675 +      if _a then output;
16676 +   run;
16677 +
16678 +   %makeReplaceCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
16679 +   %makeReplaceOptCode(Folder=&em_user_replacecode,        Data=_temp);
16680 +
16681 +   /* Generating Flow Score Code */
16682 +   data _temp;
16683 +      set &LevelData;
16684 +      where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
16685 +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
16686 +      keep NAME;
16687 +   run;
16688 +
16689 +   data _temp;
16690 +      merge _temp(in=_a) &Leveldata &nameData;
16691 +      by NAME;
16692 +      if _a then output;
16693 +   run;
16694 +   %makeUnknownCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
16695 +
16696 +   data _temp;
16697 +      merge &LevelData(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
16698 +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) &nameData;
16699 +      by NAME;
16700 +      if _a then output;
16701 +   run;
16702 +
16703 +   %makeReplaceCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
16704 +
16705 +   %if "&UFormatFlag" = "1" %then %do;
16706 +       filename _F1 "&em_user_replacecode&em_dsep._ALL_.sas" MOD;
16707 +       data _null_;
16708 +          file _F1;
16709 +          put 'length _UFormat200 $200;';
16710 +          put 'drop   _UFORMAT200;';
16711 +          put '_UFORMAT200 = " ";';
16712 +       run;
16713 +       filename _F1;
16714 +   %end;
16715 +
16716 +%mend makeClassScoreCode;
16717 +
16718 +%macro makeClassDeltaCode(nameData=_newNames);
16719 +   %if ^%sysfunc(exist(&nameData)) %then %goto doendm;
16720 +
16721 +   filename _F1 "&EM_FILE_CDELTA_TRAIN" MOD;
16722 +   data _null_;
16723 +        set &nameData end=eof;
16724 +        length string $400;
16725 +        file _F1;
16726 +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
16727 +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
16728 +        %end;
16729 +        %else %do;
16730 +            string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";'; put string;
16731 +        %end;
16732 +        put 'else';
16733 +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
16734 +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
16735 +        string = '      LEVEL="'!!strip(MLEVEL)!!'";';         put string;
16736 +        put      'end;';
16737 +        if ^eof then
16738 +           put 'else';
16739 +   run;
16740 +   %doendm:
16741 +   filename _F1;
16742 +%mend makeClassDeltaCode;
16743 +
16744 +%macro makeValueReport(Data=, outData=);
16745 +   data &outData;
16746 +      set &data;
16747 +      where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
16748 +      if LEVEL = '_UNKNOWN_' then do;
16749 +         LEVEL='Unknown';
16750 +         %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
16751 +         if REPLACE_VALUE in('_MODE_', '_DEFAULT_') then REPLACE_VALUE = strip(NORMMODE);
16752 +         else
16753 +            if REPLACE_VALUE ='_MISSING_' then do;
16754 +               if type eq 'N' then REPLACE_VALUE='.';
16755 +               else REPLACE_VALUE='_blank_';
16756 +            end;
16757 +         %end;
16758 +         %else  %do;
16759 +         if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
16760 +         else
16761 +            if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
16762 +               if type eq 'N' then REPLACE_VALUE='.';
16763 +               else REPLACE_VALUE='_blank_';
16764 +            end;
16765 +         %end;
16766 +      end;
16767 +      else do;
16768 +         if REPLACE_VALUE ='_MISSING_' then do;
16769 +            if type eq 'N' then REPLACE_VALUE='.';
16770 +            else REPLACE_VALUE='_blank_';
16771 +         end;
16772 +         else
16773 +            if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
16774 +      end;
16775 +      keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
16776 +   run;
16777 +%mend makeValueReport;
16778 +
16779 +%macro makeVarOptCode(LimitDs=, Folder=);
16780 +    %if ^%sysfunc(exist(&LimitDs)) or "&Folder" eq "" %then %goto doendo;
16781 +
16782 +    %let dsid = %sysfunc(open(&limitDs));
16783 +    %do %while(^%sysfunc(fetch(&dsid)));
16784 +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
16785 +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
16786 +
16787 +    filename sfile "&Folder.&em_dsep.&newname..sas";
16788 +    data _null_;
16789 +       length string $400;
16790 +       set &LimitDs;
16791 +       where NEWNAME="&newname";
16792 +       file sfile;
16793 +       put '* ;';
16794 +       string = '*Variable: '!!strip(name)!!';';
16795 +       put string;
16796 +       put '* ;';
16797 +       if label eq '' then
16798 +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
16799 +       else
16800 +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
16801 +       put string;
16802 +       string = strip(newname)!!'= '!!strip(NAME)!!';';
16803 +       put string;
16804 +       replacemin = .;
16805 +       string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
16806 +       put string;
16807 +       if LowerLimit ne . then do;
16808 +          if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
16809 +          if ReplaceMethodUsed="MANUAL"   then replaceMin = ReplaceMinUsed;
16810 +          put 'else';
16811 +          string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.))
16812 +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
16813 +          put string;
16814 +       end;
16815 +       if UpperLimit ne . then do;
16816 +          if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
16817 +          if ReplaceMethodUsed="MANUAL"   then replaceMax = ReplaceMaxUsed;
16818 +          put 'else';
16819 +          string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.))
16820 +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
16821 +          put string;
16822 +       end;
16823 +        run;
16824 +        filename sfile;
16825 +    %end;
16826 +    %let dsid = %sysfunc(close(&dsid));
16827 +
16828 +    %doendo:
16829 +%mend makeVarOptCode;
16830 +
16831 +%macro score;
16832 +   %em_register(key=REPLACECODE, type=FOLDER);
16833 +
16834 +   filename x catalog 'sashelp.emutil.em_deldir.source';
16835 +   %inc x;
16836 +   filename x;
16837 +   %delDir(folder=%nrbquote(&em_user_replacecode));
16838 +
16839 +   data _null_; length rc $200;
16840 +      rc = dcreate('REPLACECODE', "&EM_NODEDIR");
16841 +   run;
16842 +
16843 +   filename _F1 "&EM_FILE_EMFLOWSCORECODE";
16844 +   filename _F2 "&EM_FILE_EMPUBLISHSCORECODE";
16845 +   filename _F3 "&EM_FILE_CDELTA_TRAIN";
16846 +   data _null_;
16847 +      rc=fdelete('_F1');
16848 +      rc=fdelete('_F2');
16849 +      rc=fdelete('_F3');
16850 +   run;
16851 +   filename _F1;
16852 +   filename _F2;
16853 +   filename _F3;
16854 +
16855 +   %em_getname(key=OUTCLASS,  type=DATA);
16856 +   %em_getname(key=LIMITS, type=DATA);
16857 +   %em_getname(key=CLASSINFO, type=DATA);
16858 +
16859 +   /* Retrieve Replacement Values for Class Variables */
16860 +   %makeLevelData(outclass=&em_user_outclass, data=CLASSTEMP);
16861 +
16862 +   /* Generate Names for Replaced Variables */
16863 +   %makeNewNames(limitDs =&em_user_limits, classValue=CLASSTEMP, classname=&em_user_classinfo);
16864 +
16865 +   /* Generate score and delta code for Var Variables */
16866 +   %if %sysfunc(exist(&EM_USER_LIMITS)) %then %do;
16867 +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMFLOWSCORECODE);
16868 +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMPUBLISHSCORECODE);
16869 +       %makeVarOptCode(LimitDs= &EM_USER_LIMITS,    Folder=&em_user_replacecode);
16870 +       %makeVarDeltaCode(LimitDs = &EM_USER_LIMITS);
16871 +
16872 +       proc print data=&EM_USER_LIMITS label noobs;
16873 +          var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
16874 +          label REPLACEMINUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
16875 +                REPLACEMAXUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
16876 +          title9  ' ';
16877 +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varlimits_title, NOQUOTE))";
16878 +       run;
16879 +       title10;
16880 +  %end;
16881 +
16882 +   %if %sysfunc(exist(&EM_USER_CLASSINFO)) %then %do;
16883 +       %makeClassScoreCode(LevelData=CLASSTEMP, nameData=&em_user_classinfo);
16884 +       %makeClassDeltaCode(nameData=&em_user_classinfo);
16885 +   %end;
16886 +
16887 +   %em_getname(key=VALUES, type=DATA);
16888 +   %makeValueReport(data=CLASSTEMP, outData=&EM_USER_VALUES);
16889 +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
16890 +       %let nobs = 0;
16891 +       %let dsid = %sysfunc(open(&EM_USER_VALUES));
16892 +       %if &dsid %then %do;
16893 +           %let nobs =  %sysfunc(attrn(&dsid, NOBS));
16894 +           %let dsid = %sysfunc(close(&dsid));
16895 +       %end;
16896 +       %if &nobs %then
16897 +           %EM_REPORT(key=VALUES, viewtype=DATA, block=MODEL, description=ReplaceLevels,autoDisplay=N);
16898 +   %end;
16899 +
16900 +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
16901 +       proc print data=&EM_USER_VALUES label noobs;
16902 +          title9  ' ';
16903 +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classreplacement_title, NOQUOTE))";
16904 +      run;
16905 +      title10;
16906 +  %end;
16907 +
16908 +   proc datasets lib=work nolist;
16909 +      delete CLASSTEMP;
16910 +   run;
16911 +   quit;
16912 +
16913 +   %em_register(key=EMSCOREVAR, type=DATA);
16914 +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
16915 +   proc datasets lib=&em_lib nolist;
16916 +      delete &scorevarDs;
16917 +   run;
16918 +   quit;
16919 +
16920 +   %let filrf=mydir;
16921 +   %let rc=%sysfunc(filename(filrf,&em_user_replacecode));
16922 +   %let did=%sysfunc(dopen(&filrf));
16923 +
16924 +   %if &did %then %do;
16925 +       %let memcount=%sysfunc(dnum(&did));
16926 +       %if &memcount > 0 %then %do;
16927 +           data &em_user_emscorevar;
16928 +              length Name $32 formula $70 file $200;
16929 +              keep NAME Formula file;
16930 +
16931 +           %if %sysfunc(fileexist(&em_user_replacecode&em_dsep._ALL_.sas)) %then %do;
16932 +               name=''; file="REPLACECODE&em_dsep._ALL_.sas";
16933 +               output;
16934 +           %end;
16935 +           %do i=1 %to &memcount;
16936 +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
16937 +               %let newvar = %scan(&name, 1, .);
16938 +               %if "&newvar" ne "_ALL_" %then %do;
16939 +                   name = "&newvar"; file="REPLACECODE&em_dsep&name";
16940 +                   output;
16941 +               %end;
16942 +           %end;
16943 +           run;
16944 +       %end;
16945 +  %end;
16946 +  %if &did %then %let did = %sysfunc(dclose(&did));
16947 +
16948 +
16949 +%mend score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
16950 +%macro delDir(folder=);
16951 +   %let filrf=mydir;
16952 +   %let rc=%sysfunc(filename(filrf,&folder));
16953 +   %let did=%sysfunc(dopen(&filrf));
16954 +
16955 +   %if &did %then %do;
16956 +       %let memcount=%sysfunc(dnum(&did));
16957 +       %if &memcount > 0 %then %do;
16958 +           %do i=1 %to &memcount;
16959 +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
16960 +               data _null_;
16961 +                  fname="_temp&i";
16962 +                  rc=filename(fname,"&folder&em_dsep.&name");
16963 +                  if rc = 0 and fexist(fname) then
16964 +                     rc=fdelete(fname);
16965 +                  rc=filename(fname);
16966 +               run;
16967 +           %end;
16968 +       %end;
16969 +       %let rc=%sysfunc(dclose(&did));
16970 +   %end;
16971 +   %let rc = %sysfunc(fdelete(&filrf));
16972 +   %let rc=%sysfunc(filename(filrf));
16973 +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref X has been deassigned.
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
NOTE: Fileref _F2 has been deassigned.
NOTE: Fileref _F3 has been deassigned.
 
WARNING: The variable UNKWOWNDEFAULT in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 16 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set WORK.REPLACE_MODE has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.REPL2_VARIABLESET.
NOTE: The data set EMWS1.REPL2_VARIABLESET has 13 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This might cause unexpected results.
NOTE: There were 16 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: There were 3 observations read from the data set WORK.REPLACE_MODE.
NOTE: There were 4 observations read from the data set EMWS1.REPL2_VARIABLESET.
      WHERE MLEVEL not = 'INTERVAL';
NOTE: The data set WORK.CLASSTEMP has 16 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.REPLACE_MODE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: 4 observations with duplicate key values were deleted.
NOTE: The data set WORK.INVARNAME has 2 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.INVARNAME has 2 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.OUTNAME has 2 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.OUTNAME.
NOTE: The data set WORK.OUTNAME has 2 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.CLASSTEMP.
NOTE: The data set WORK.LENGTH has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.OUTNAME.
NOTE: There were 3 observations read from the data set WORK.LENGTH.
NOTE: The data set EMWS1.REPL2_CLASSINFO has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.LENGTH (memtype=DATA).
NOTE: Deleting WORK.INVARNAME (memtype=DATA).
NOTE: Deleting WORK.OUTNAME (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 12 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 49.
NOTE: There were 2 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.REPL2_CLASSINFO.
      WHERE ROLE not = 'TARGET';
NOTE: The data set WORK._TEMPNEWVARS has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 8 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 49.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
NOTE: The data set WORK._TEMP_ has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\REPLACECODE\REP_change_flag.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 8 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 49.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_change_flag';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Deleting WORK._TEMPNEWVARS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 16 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 2 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=181,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 2 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK._TEMP has 3 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=181,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 20 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 33.
NOTE: There were 3 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\REPLACECODE\REP_change_flag.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=182,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 13 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 28.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='change_flag';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
 
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 16 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 2 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=314,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
 
NOTE: There were 6 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 2 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK._TEMP has 6 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=314,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 33 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 33.
NOTE: There were 6 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\REPLACECODE\_ALL_.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 3 records were written to the file _F1.
      The minimum record length was 18.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12May2019:23:04:56,
      Create Time=12May2019:23:04:56
 
NOTE: 13 records were written to the file _F1.
      The minimum record length was 4.
      The maximum record length was 43.
NOTE: There were 2 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
 
NOTE: There were 6 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set EMWS1.REPL2_VALUES has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: There were 6 observations read from the data set EMWS1.REPL2_VALUES.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.CLASSTEMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting EMWS1.REPL2_EMSCOREVAR (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable formula is uninitialized.
NOTE: The data set EMWS1.REPL2_EMSCOREVAR has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
16974  *------------------------------------------------------------*;
16975  * End SCORE: Repl2;
16976  *------------------------------------------------------------*;
16977
 
16978  filename emflow "C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas";
16979  *------------------------------------------------------------*;
16980  * Repl2: Scoring DATA data;
16981  *------------------------------------------------------------*;
16982  data EMWS1.Repl2_TRAIN
16983  / view=EMWS1.Repl2_TRAIN
16984  ;
16985  set EMWS1.Trans_TRAIN
16986  ;
16987  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas.
16988 +
16989 +* ;
16990 +* Defining New Variables;
16991 +* ;
16992 +Length REP_change_flag $3;
16993 +Label REP_change_flag='Replacement: change_flag';
16994 +format REP_change_flag $3.;
16995 +REP_change_flag= change_flag;
16996 +Length REP_trade_flag $4;
16997 +Label REP_trade_flag='Replacement: trade_flag';
16998 +format REP_trade_flag $4.;
16999 +REP_trade_flag= trade_flag;
17000 +
17001 +* ;
17002 +* Replace Specific Class Levels ;
17003 +* ;
17004 +length _UFormat200 $200;
17005 +drop   _UFORMAT200;
17006 +_UFORMAT200 = " ";
17007 +* ;
17008 +* Variable: change_flag;
17009 +* ;
17010 +_UFORMAT200 = strip(
17011 +put(change_flag,$3.));
17012 +if _UFORMAT200 =  "pos" then
17013 +REP_change_flag="P";
17014 +else
17015 +if _UFORMAT200 =  "non" then
17016 +REP_change_flag="O";
17017 +else
17018 +if _UFORMAT200 =  "neg" then
17019 +REP_change_flag="N";
17020 +* ;
17021 +* Variable: trade_flag;
17022 +* ;
17023 +_UFORMAT200 = strip(
17024 +put(trade_flag,$4.));
17025 +if _UFORMAT200 =  "sell" then
17026 +REP_trade_flag="S";
17027 +else
17028 +if _UFORMAT200 =  "hold" then
17029 +REP_trade_flag="H";
17030 +else
17031 +if _UFORMAT200 =  "buy" then
17032 +REP_trade_flag="B";
NOTE: %INCLUDE (level 1) ending.
17033  run;
 
NOTE: DATA STEP view saved on file EMWS1.REPL2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
17034  quit;
17035  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17036  filename emflow "C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas";
17037  *------------------------------------------------------------*;
17038  * Repl2: Scoring VALIDATE data;
17039  *------------------------------------------------------------*;
17040  data EMWS1.Repl2_VALIDATE
17041  / view=EMWS1.Repl2_VALIDATE
17042  ;
17043  set EMWS1.Trans_VALIDATE
17044  ;
17045  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas.
17046 +
17047 +* ;
17048 +* Defining New Variables;
17049 +* ;
17050 +Length REP_change_flag $3;
17051 +Label REP_change_flag='Replacement: change_flag';
17052 +format REP_change_flag $3.;
17053 +REP_change_flag= change_flag;
17054 +Length REP_trade_flag $4;
17055 +Label REP_trade_flag='Replacement: trade_flag';
17056 +format REP_trade_flag $4.;
17057 +REP_trade_flag= trade_flag;
17058 +
17059 +* ;
17060 +* Replace Specific Class Levels ;
17061 +* ;
17062 +length _UFormat200 $200;
17063 +drop   _UFORMAT200;
17064 +_UFORMAT200 = " ";
17065 +* ;
17066 +* Variable: change_flag;
17067 +* ;
17068 +_UFORMAT200 = strip(
17069 +put(change_flag,$3.));
17070 +if _UFORMAT200 =  "pos" then
17071 +REP_change_flag="P";
17072 +else
17073 +if _UFORMAT200 =  "non" then
17074 +REP_change_flag="O";
17075 +else
17076 +if _UFORMAT200 =  "neg" then
17077 +REP_change_flag="N";
17078 +* ;
17079 +* Variable: trade_flag;
17080 +* ;
17081 +_UFORMAT200 = strip(
17082 +put(trade_flag,$4.));
17083 +if _UFORMAT200 =  "sell" then
17084 +REP_trade_flag="S";
17085 +else
17086 +if _UFORMAT200 =  "hold" then
17087 +REP_trade_flag="H";
17088 +else
17089 +if _UFORMAT200 =  "buy" then
17090 +REP_trade_flag="B";
NOTE: %INCLUDE (level 1) ending.
17091  run;
 
NOTE: DATA STEP view saved on file EMWS1.REPL2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17092  quit;
17093  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17095  proc sort data=WORK.EM_USER_REPORT;
17096  by ID VIEW;
17097  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17098  *------------------------------------------------------------*;
17099  * Repl2: Computing metadata for TRAIN data;
17100  *------------------------------------------------------------*;
 
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 12, 2019
Time:                23:04:57
*------------------------------------------------------------*
17474  %let EMEXCEPTIONSTRING=;
17475  *------------------------------------------------------------*;
17476  * REPORT: Repl2;
17477  *------------------------------------------------------------*;
17478  %let EM_ACTION = REPORT;
17479  %let syscc = 0;
17480  filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
17481  %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
17483 +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
17485 +   filename macFile catalog 'work.emutil.macro.source';
17486 +   %let _METAOBS = 0;
17487 +   %let _maxvar = &maxvar;
17488 +   %if "&_maxvar" eq "" %then %let maxvar = -1;
17490 +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
17491 +                   or (&metadata eq ) %then %do;
17492 +       %put * No metadata data set defined;
17493 +       %goto doend;
17494 +   %end;
17496 +   data _null_;
17497 +      length _STRING_ $80;
17498 +      retain _STRING_ '' maxvar 0;
17499 +      set &metadata end=eof;
17500 +      file macFile;
17501 +      %if %nrbquote(&where) ne %then %do;
17502 +          %let whereClause = where (%nrbquote(&where));
17503 +          %unquote(&whereClause);
17504 +      %end;
17505 +      if _N_=1 then do;
17506 +         string = "%"!!"macro &name;";
17507 +         put string;
17508 +      end;
17509 +      maxvar +1;
17510 +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
17511 +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
17512 +         if eof
17513 +            %if  %sysevalf(&_maxvar > 0) %then %do;
17514 +                or maxvar >= &maxvar
17515 +            %end;
17516 +            then do;
17517 +            put _STRING_;
17518 +            string = "%"!!"mend &name;";
17519 +            put string;
17520 +            string = strip(put(_N_, best.));
17521 +            call symput('_METAOBS', string);
17522 +            %if (&nummacro ne ) %then %do;
17523 +                put "%" "global &nummacro;";
17524 +                put "%" "let &nummacro = " string ";";
17525 +            %end;
17526 +            stop;
17527 +         end;
17528 +      end;
17529 +      else do;
17530 +         put _STRING_;
17531 +         _string_ = TRIM(&key);
17532 +         if eof
17533 +            %if  %sysevalf(&_maxvar > 0) %then %do;
17534 +              or maxvar >= &maxvar
17535 +           %end;
17536 +            then do;
17537 +            put _STRING_;
17538 +            string = "%"!!"mend &name;";
17539 +            put string;
17540 +        end;
17541 +      end;
17542 +      if eof
17543 +         %if  %sysevalf(&_maxvar > 0) %then %do;
17544 +             or maxvar >= &maxvar
17545 +         %end;
17546 +         then do;
17547 +         string = strip(put(_N_, best.));
17548 +         call symput('_METAOBS', string);
17549 +         %if (&nummacro ne ) %then %do;
17550 +             put "%" "global &nummacro;";
17551 +             put "%" "let &nummacro = " string ";";
17552 +         %end;
17553 +         stop;
17554 +      end;
17555 +   run;
17557 +   %doend:
17558 +   %if ^&_METAOBS %then %do;
17559 +       data _null_;
17560 +          file macFile;
17561 +          put "%" "macro &name;";
17562 +          put "%" "mend &name;";
17563 +          %if (&nummacro ne ) %then %do;
17564 +              put "%" "global &nummacro;";
17565 +              put "%" "let &nummacro = 0;";
17566 +          %end;
17567 +      run;
17568 +   %end;
17569 +   %inc macFile;
17570 +   filename macFile;
17571 +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
17572  filename X;
NOTE: Fileref X has been deassigned.
17573   %macro main;
17574
17575     filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
17576     %include temp;
17577     filename temp;
17578
17579     %if %upcase(&EM_ACTION) = CREATE %then %do;
17580
17581         filename temp catalog 'sashelp.emmdfy.Replace_create.source';
17582         %include temp;
17583         filename temp;
17584         %create;
17585     %end;
17586     %else
17587     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17588
17589         filename temp catalog 'sashelp.emmdfy.Replace_train.source';
17590         %include temp;
17591         filename temp;
17592         %train;
17593     %end;
17594     %else
17595     %if %upcase(&EM_ACTION) = SCORE %then %do;
17596
17597         filename temp catalog 'sashelp.emmdfy.Replace_score.source';
17598         %include temp;
17599         filename temp;
17600         %score;
17601     %end;
17602     %if %upcase(&EM_ACTION) = REPORT %then %do;
17603
17604         filename temp catalog 'sashelp.emmdfy.Replace_report.source';
17605         %include temp;
17606         filename temp;
17607         %report;
17608     %end;
17609     %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
17610         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
17611         %include temp;
17612         filename temp;
17613         %em_replace_openoutclass;
17614     %end;
17615     %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
17616         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
17617         %include temp;
17618         filename temp;
17619         %em_replace_closeoutclass;
17620     %end;
17621  %mend main;
17622
17623  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
17624 +%macro SetProperties;
17625 +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
17626 +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
17627 +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
17628 +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
17629 +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
17630 +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
17631 +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
17632 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
17633 +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
17634 +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
17635 +
17636 +%mend SetProperties;
17637 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_REPORT.SOURCE.
17638 +%macro makeNameDs(namedata=, limitDs=, classname=);
17639 +    %let classnum=0;
17640 +    %let dsid = %sysfunc(open(&classname));
17641 +    %if &dsid>0 %then %do;
17642 +        %let classnum = %sysfunc(attrn(&dsid, NOBS));
17643 +        %let dsid = %sysfunc(close(&dsid));
17644 +    %end;
17645 +
17646 +    %let varnum=0;
17647 +    %let dsid = %sysfunc(open(&LimitDs));
17648 +    %if &dsid>0 %then %do;
17649 +        %let varnum = %sysfunc(attrn(&dsid, NOBS));
17650 +        %let dsid = %sysfunc(close(&dsid));
17651 +    %end;
17652 +    %if ^&varnum and  ^&classnum %then %goto doendmnd;
17653 +
17654 +    data &nameData;
17655 +       set
17656 +       %if &varnum %then %do;
17657 +          &limitDs
17658 +      %end;
17659 +      %if &classnum %then %do;
17660 +          &classname
17661 +      %end;
17662 +    ;
17663 +    run;
17664 +    proc sort data=&nameData;
17665 +       by name;
17666 +    run;
17667 +
17668 +    %doendmnd:
17669 +%mend makeNameDs;
17670 +
17671 +%macro countReplace(FileRef1=, dataRole=, data=, CountData=);
17672 +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, VIEW))) or (&data eq ) %then %goto doendm;
17673 +
17674 +   data _temp;
17675 +      length DataRole $8;
17676 +      DataRole ="&DataRole";
17677 +      array _ReplaceCount{&ReplaceNum} (
17678 +      %do i=1 %to &ReplaceNum;
17679 +          0
17680 +      %end;
17681 +      );
17682 +      array _DIFF{&ReplaceNum};
17683 +      retain _ReplaceCount1 -- _ReplaceCount&ReplaceNum;
17684 +      set &data end=eof;
17685 +      %inc &FileRef1;
17686 +      do i=1 to &ReplaceNum;
17687 +         if _DIFF(i) then _ReplaceCount(i) = _ReplaceCount(i)+1;
17688 +      end;
17689 +      keep DataRole _ReplaceCount:;
17690 +      if eof then
17691 +         output;
17692 +   run;
17693 +   proc append base=&CountData data=_temp;
17694 +   run;
17695 +   proc datasets lib=WORK nolist;
17696 +      delete _temp;
17697 +   run;
17698 +
17699 +   %doendm:
17700 +
17701 +%mend;
17702 +
17703 +%macro makeCountReport(nameData=, outData=countData);
17704 +   %if ^%sysfunc(exist(&nameData))%then %goto doendmc;
17705 +
17706 +   %global ReplaceNum;
17707 +   %let ReplaceNum=0;
17708 +   %let dsid = %sysfunc(open(&namedata));
17709 +   %if &dsid>0 %then %do;
17710 +       %let ReplaceNum = %sysfunc(attrn(&dsid, NOBS));
17711 +       %let dsid = %sysfunc(close(&dsid));
17712 +   %end;
17713 +   %if ^&ReplaceNum %then %goto doendmc;
17714 +
17715 +   %EM_REGISTER(key=DiffCode, TYPE=FILE, EXTENSION=sas);
17716 +   filename _F1 "&EM_USER_DiffCode";
17717 +
17718 +   data _null_;
17719 +      length string $200;
17720 +      set &namedata;
17721 +      file _F1;
17722 +      string = 'Label '!!'_ReplaceCount'!!strip(put(_N_,BEST.))!!' = "'!!strip(name)!!'";';
17723 +      put string;
17724 +      string = 'if '!!strip(NAME)!!' ne '!!strip(newname)!!' then ';
17725 +      put string;
17726 +      string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 1;';
17727 +      put string;
17728 +      put ' else ';
17729 +      string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 0;';
17730 +      put string;
17731 +   run;
17732 +   %countReplace(FileRef1=_F1, dataRole=Train, data=&EM_EXPORT_TRAIN,    CountData=_tempCount);
17733 +   %countReplace(FileRef1=_F1, dataRole=Valide,data=&EM_EXPORT_VALIDATE, CountData=_tempCount);
17734 +   %countReplace(FileRef1=_F1, dataRole=Test,  data=&EM_EXPORT_TEST,     CountData=_tempCount);
17735 +
17736 +   filename _F1;
17737 +
17738 +   %let validateFlag = 0;
17739 +   %let testFlag     = 0;
17740 +   %if (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE, VIEW)))
17741 +                  and (&EM_IMPORT_VALIDATE ne ) %then %do;
17742 +        %let validateFlag = 1;
17743 +    %end;
17744 +    %if (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST, VIEW)))
17745 +                    and (&EM_IMPORT_TEST ne ) %then %do;
17746 +          %let testFlag   = 1;
17747 +    %end;
17748 +
17749 +    proc transpose data=_tempCount out=&outData(drop=_NAME_ rename=(_LABEL_=NAME Col1=TRAIN
17750 +      %if &validateFlag = 1 %then %do;
17751 +          Col2=VALIDATE
17752 +      %end;
17753 +      %if &testFlag = 1 %then %do;
17754 +          Col3=TEST
17755 +      %end;
17756 +
17757 +      ));
17758 +   run;
17759 +
17760 +   %let lib = WORK;
17761 +   %if %index(&outData, .) %then %do;
17762 +       %let lib    = %scan(&outData, 1, .);
17763 +       %let member = %scan(&outData, 2, .);
17764 +   %end;
17765 +   %else
17766 +       %let member = &outData;
17767 +  proc sort data=&outdata;
17768 +     by name;
17769 +  run;
17770 +  data &outData;
17771 +      merge &namedata(keep=NAME ROLE LABEL) &outData;
17772 +      by NAME;
17773 +   run;
17774 +   proc datasets lib=&lib nolist;
17775 +      modify &member;
17776 +      label NAME =  "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
17777 +            ROLE =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel   , NOQUOTE))"
17778 +            LABEL=  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))"
17779 +            TRAIN=  "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel   , NOQUOTE))"
17780 +      %if &validateFlag = 1 %then %do;
17781 +            VALIDATE= "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel   , NOQUOTE))"
17782 +      %end;
17783 +      %if &testFlag = 1 %then %do;
17784 +            TEST= "%sysfunc(sasmsg(sashelp.dmine, rpt_test_vlabel   , NOQUOTE))"
17785 +      %end;
17786 +      ;
17787 +   run;
17788 +   proc print data=&em_user_count label;
17789 +      title9  ' ';
17790 +      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_replacecount_title, NOQUOTE))";
17791 +   run;
17792 +   title10;
17793 +   proc datasets lib=WORK nolist;
17794 +      delete _tempCount;
17795 +   run;
17796 +
17797 +  %doendmc:
17798 +%mend makeCountReport;
17799 +
17800 +%macro report;
17801 +   %em_getname(key=COUNT,        type=DATA);
17802 +   %em_getname(key=REPORTLIMITS, type=DATA);
17803 +   %em_getname(key=LIMITS,       type=DATA);
17804 +   %em_getname(key=CLASSINFO,    type=DATA);
17805 +
17806 +  /* Generating Reports */
17807 +   %let lib     = %scan(&EM_USER_COUNT, 1, .);
17808 +   %let member =;
17809 +   %if %sysfunc(exist(&em_user_reportlimits)) %then %let member = %scan(&EM_USER_REPORTLIMITS, 2, .);
17810 +   %if %sysfunc(exist(&em_user_count))        %then %let member = &member %scan(&EM_USER_count, 2, .);
17811 +   %if "&member" ne "" %then %do;
17812 +       proc datasets lib=&lib nolist;
17813 +         delete &member;
17814 +       run;
17815 +       quit;
17816 +   %end;
17817 +
17818 +   %let limitFlag = %sysfunc(exist(&em_user_limits));
17819 +    %if ^&limitFlag and  ^%sysfunc(exist(&em_user_classinfo)) %then %goto doendr;
17820 +
17821 +    %if &limitFlag %then %do;
17822 +        data &em_user_reportlimits;
17823 +           set &em_user_limits;
17824 +           label REPLACEMETHODUSED = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
17825 +                 REPLACEMINUSED    = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
17826 +                 REPLACEMAXUSED    = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
17827 +           drop ROLE LEVEL REPLACEMETHOD REPLACEMIN REPLACEMAX;
17828 +        run;
17829 +        %EM_REPORT(key=REPORTLIMITS,  viewtype=DATA, block=MODEL, description=ReplaceInterval, autoDisplay=Y);
17830 +    %end;
17831 +
17832 +    %if &em_property_CountReport=Y %then %do;
17833 +        %makeNameDs(namedata=newVarInfo, limitDs=&em_user_limits, classname=&em_user_classinfo);
17834 +
17835 +        %let labeloption = %sysfunc(getoption(label));
17836 +        options LABEL;run;
17837 +
17838 +        %makeCountReport(namedata=newVarInfo, outdata=&EM_USER_COUNT);
17839 +
17840 +        options &labeloption;run;
17841 +
17842 +        %EM_REPORT(key=COUNT, viewtype=DATA, block=MODEL, description=ReplaceCount, autoDisplay=Y);
17843 +   %end;
17844 +   proc datasets lib=WORK nolist;
17845 +      delete newVarInfo;
17846 +   run;
17847 +   %doendr:
17848 +%mend report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 2 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK.NEWVARINFO has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.NEWVARINFO.
NOTE: The data set WORK.NEWVARINFO has 2 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _F1 is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\DiffCode.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12May2019:23:04:57,
      Create Time=09May2019:20:38:36
 
NOTE: 10 records were written to the file _F1.
      The minimum record length was 6.
      The maximum record length was 38.
NOTE: There were 2 observations read from the data set WORK.NEWVARINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _F1 is file C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\DiffCode.sas.
17849 +Label _ReplaceCount1 = "change_flag";
17850 +if change_flag ne REP_change_flag then
17851 +_DIFF1= 1;
17852 + else
17853 +_DIFF1= 0;
17854 +Label _ReplaceCount2 = "trade_flag";
17855 +if trade_flag ne REP_trade_flag then
17856 +_DIFF2= 1;
17857 + else
17858 +_DIFF2= 0;
NOTE: %INCLUDE (level 1) ending.
 
NOTE: There were 135 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 135 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 135 observations read from the data set EMWS1.REPL2_TRAIN.
NOTE: The data set WORK._TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Appending WORK._TEMP to WORK._TEMPCOUNT.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMPCOUNT has 1 observations and 3 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _F1 is file C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Repl2\DiffCode.sas.
17859 +Label _ReplaceCount1 = "change_flag";
17860 +if change_flag ne REP_change_flag then
17861 +_DIFF1= 1;
17862 + else
17863 +_DIFF1= 0;
17864 +Label _ReplaceCount2 = "trade_flag";
17865 +if trade_flag ne REP_trade_flag then
17866 +_DIFF2= 1;
17867 + else
17868 +_DIFF2= 0;
NOTE: %INCLUDE (level 1) ending.
 
NOTE: There were 61 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 61 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: There were 61 observations read from the data set EMWS1.REPL2_VALIDATE.
NOTE: The data set WORK._TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Appending WORK._TEMP to WORK._TEMPCOUNT.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: 1 observations added.
NOTE: The data set WORK._TEMPCOUNT has 2 observations and 3 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
NOTE: Fileref _F1 has been deassigned.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TEMPCOUNT.
NOTE: The data set EMWS1.REPL2_COUNT has 2 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.REPL2_COUNT.
NOTE: The data set EMWS1.REPL2_COUNT has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This might cause unexpected results.
NOTE: There were 2 observations read from the data set WORK.NEWVARINFO.
NOTE: There were 2 observations read from the data set EMWS1.REPL2_COUNT.
NOTE: The data set EMWS1.REPL2_COUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: MODIFY was successful for EMWS1.REPL2_COUNT.DATA.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.REPL2_COUNT.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Deleting WORK._TEMPCOUNT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.NEWVARINFO (memtype=DATA).
17869  *------------------------------------------------------------*;
17870  * End REPORT: Repl2;
17871  *------------------------------------------------------------*;
17872
17873  /* Reset EM Options */
17874  options formchar="|----|+|---+=|-/\<>*";
17875  options nocenter ls=256 ps=10000;
17876  goptions reset=all device=GIF NODISPLAY;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17877  proc sort data=WORK.EM_USER_REPORT;
17878  by ID VIEW;
17879  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
