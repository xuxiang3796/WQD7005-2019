*------------------------------------------------------------*
User:                dante
Date:                May 12, 2019
Time:                17:45:32
Site:                12600285
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                May 12, 2019
Time:                17:45:30
*------------------------------------------------------------*
14715  proc freq data=EMWS1.EMSave_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.EMSaveMETA;
14717  run;
 
NOTE: There were 10 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
NOTE: The data set WORK.EMSAVEMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.EMSaveMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 3 observations read from the data set WORK.EMSAVEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMEXCEPTIONSTRING=;
15041  *------------------------------------------------------------*;
15042  * EMSave: Generation of macros and macro variables;
15043  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15044  *------------------------------------------------------------*;
 
15045  %let EMEXCEPTIONSTRING=;
15046  *------------------------------------------------------------*;
15047  * TRAIN: EMSave;
15048  *------------------------------------------------------------*;
15049  %let EM_ACTION = TRAIN;
15050  %let syscc = 0;
15051  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
15052
15053  %macro EM_SAVEXT_MAIN;
15054
15055     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
15056         filename _create catalog 'sashelp.emutil.savext_create.source';
15057         %include _create;
15058         filename _create;
15059         %EM_SAVEXT_CREATE;
15060     %end;
15061     %else
15062     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
15063         filename _train catalog 'sashelp.emutil.savext_train.source';
15064         %include _train;
15065         filename _train;
15066         %EM_SAVEXT_TRAIN;
15067     %end;
15068
15069  %mend EM_SAVEXT_MAIN;
15070
15071  %EM_SAVEXT_MAIN;
NOTE: %INCLUDE (level 1) file _TRAIN is file SASHELP.EMUTIL.SAVEXT_TRAIN.SOURCE.
15072 +*** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
15074 +%macro EM_SAVEXT_TRAIN;
15076 +    *** IMPORT UTILITY MACROS;
15078 +    filename _savutil catalog 'sashelp.emutil.savext_macros.source';
15079 +    %include _savutil;
15080 +    filename _savutil;
15082 +    *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
15083 +    *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
15084 +    *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
15086 +    data _null_;
15087 +        length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
15088 +        _i=0;
15090 +        *** TRAIN;
15091 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_DATA) and (("&EM_PROPERTY_TRAIN"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15092 +            _i=_i+1;                                                        /* INCREMENT ARRAY INDEX */
15093 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_DATA, TRAIN, _i);                /* INSERT INTO MACRO ARRAY */
15094 +        %end;
15096 +        *** VALIDATE;
15097 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_VALIDATE) and (("&EM_PROPERTY_VALIDATE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15098 +            _i=_i+1;
15099 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_VALIDATE, VALIDATE, _i);
15100 +        %end;
15102 +        *** TEST;
15103 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TEST) and (("&EM_PROPERTY_TEST"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15104 +            _i=_i+1;
15105 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TEST, TEST, _i);
15106 +        %end;
15108 +        *** SCORE;
15109 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_SCORE) and (("&EM_PROPERTY_SCORE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15110 +            _i=_i+1;
15111 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_SCORE, SCORE, _i);
15112 +        %end;
15114 +        *** TRANSACTION;
15115 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TRANSACTION) and (("&EM_PROPERTY_TRANSACTION"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15116 +            _i=_i+1;
15117 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TRANSACTION, TRANSACTION, _i);
15118 +        %end;
15120 +        *** ESTABLISH NUMBER OF SETS TO SAVE;
15121 +        call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
15123 +    run;
15125 +    *** EXIT IF NO PARTITIONS TO SAVE;
15127 +    %if ^(&_NUM_SAVE_SETS) %then %do;
15128 +        %put &EM_CODEBAR;
15129 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nodata_warn, NOQUOTE));
15130 +        %put &WARNING;
15131 +        %put &EM_CODEBAR;
15132 +        %goto quit;
15133 +    %end;
15135 +    *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
15136 +    *** REVERT TO DEFAULT NAME;
15138 +    %if ^(%nrbquote(%sysfunc(compress("&EM_PROPERTY_NAME")))="") %then %do;
15139 +        %let _BAD_CHARS= <>:%str(%")%str(%')/\|?* %nrstr(&)%nrstr(%%);
15140 +        %let _BAD_CHAR_FLAG= 0;
15141 +        %do _i= 1 %to %length(%nrbquote(&_BAD_CHARS));
15142 +            %if %index(%nrbquote(&EM_PROPERTY_NAME), %nrbquote(%substr(%nrbquote(&_BAD_CHARS), &_i, 1)))
15143 +                %then %let _BAD_CHAR_FLAG= 1;
15144 +        %end;
15145 +        %if %sysfunc(kcount(%nrbquote(&EM_PROPERTY_NAME))) %then %let _BAD_CHAR_FLAG= 1;
15147 +        %if &_BAD_CHAR_FLAG %then %do;
15148 +           %put &EM_CODEBAR;
15149 +           %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_bad_char_err, NOQUOTE));
15150 +           %put &WARNING;
15151 +           %put &EM_CODEBAR;
15152 +           *** REVERT TO DEFAULT NAME;
15153 +           %let EM_PROPERTY_NAME = em_save;
15154 +        %end;
15155 +    %end;
15156 +    *** ACCOUNT FOR LIB ISSUES;
15158 +    %if (%upcase(%sysfunc(compress("&EM_PROPERTY_LIB"))) = "WORK") %then %do;
15159 +        %put &EM_CODEBAR;
15160 +        %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_work_lib_warn, NOQUOTE));
15161 +        %put &WARNING;                                                      /* WORK IS A TEMPORARY LIBRARY */
15162 +        %put &EM_CODEBAR;                                                   /* IT DISAPPEARS AFTER THE FLOW COMPLETES ALONG WITH DATA SAVED THERE */
15163 +    %end;
15166 +    %if (%sysfunc(compress("&EM_PROPERTY_LIB")) = "") %then %do;            /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
15167 +        libname _em_save "%nrbquote(&EM_NODEDIR)";                          /* AND IN OTHERS AS "" */
15168 +        %let EM_PROPERTY_LIB = _em_save;
15169 +    %end;
15171 +    *** CHECK FOR EXISTING LIB;
15173 +    %let _rc = %sysfunc(libref(&EM_PROPERTY_LIB));
15174 +    %if &_rc %then %do;
15175 +        %let EMEXCEPTIONSTRING=exception.server.DATASOURCE.LIBRARY.NOTASSIGNED,&EM_PROPERTY_LIB;
15176 +        %put &EM_CODEBAR;
15177 +        %let ERROR1 = %sysfunc(sasmsg(sashelp.dmine, DATASOURCE.LIBRARY.NOTASSIGNED_ERR, NOQUOTE, &EM_PROPERTY_LIB));
15178 +        %put &ERROR1;
15179 +        %put &EM_CODEBAR;
15180 +        %goto quit;
15181 +    %end;
15183 +    *** ACCOUNT FOR DEFAULT NAME;                                           /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
15184 +                                                                            /* AND IN OTHERS AS "" */
15185 +    %if (%sysfunc(compress("&EM_PROPERTY_NAME"))="") %then %let EM_PROPERTY_NAME = em_save;
15187 +    *** CALL UTILITY MACROS TO SAVE SETS *************************************;
15189 +    %if ("&EM_PROPERTY_TYPE"="SAS7BDAT") %then %do;                         /* OUTPUT SAS DATA SET */
15190 +        %do _i=1 %to &_num_save_sets;
15191 +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);           /* GET EXACT INPUT VARS FOR EACH INPUT SET */
15192 +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;                     /* IF NO VARIABLES WERE SELECTED CONTINUE TO NEXT PARTITION */
15193 +                %put &EM_CODEBAR;                                           /* REALLY ONLY MATTERS FOR TRANSACTION DATA - OTHERWISE ALL PARTITIONS WILL HAVE SAME NUMBER OF VARS */
15194 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
15195 +                %put &WARNING;
15196 +                %put &EM_CODEBAR;
15197 +                %goto continue_sas_loop;
15198 +            %end;
15199 +            %EM_SAVEXT_SAS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);                /* CYCLE THROUGH SETS TO SAVE */
15200 +            %continue_sas_loop:
15201 +        %end;
15202 +    %end;
15203 +    %else %do;                                                              /* OUTPUT JMP, EXCEL 2007, CSV OR TAB TABLE */
15204 +        %do _i=1 %to &_num_save_sets;
15205 +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
15206 +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;
15207 +                %put &EM_CODEBAR;
15208 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
15209 +                %put &WARNING;
15210 +                %put &EM_CODEBAR;
15211 +                %goto continue_pxpt_loop;
15212 +            %end;
15213 +            %EM_SAVEXT_PXPT(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
15214 +            %continue_pxpt_loop:
15215 +        %end;
15216 +    %end;
15218 +    *** OUTPUT ****************************************************************;
15220 +    %if %sysfunc(exist(_save_output_temp)) %then %do;
15222 +        %EM_GETNAME(key=SAVEOUT, type=DATA);
15224 +        *** SAVE OUTPUT DATA TO PROJECT;
15226 +        data &EM_USER_SAVEOUT;
15227 +            set _save_output_temp;
15228 +            label
15229 +                nobs="%sysfunc(sasmsg(sashelp.dmine, save_numobs_vlabel, NOQUOTE))"
15230 +                outnobs="%sysfunc(sasmsg(sashelp.dmine, save_numoutobs_vlabel, NOQUOTE))"
15231 +                vars="%sysfunc(sasmsg(sashelp.dmine, rpt_varcount_vlabel, NOQUOTE))"
15232 +                name="%sysfunc(sasmsg(sashelp.dmine, save_location_vlabel, NOQUOTE))"
15233 +                %if ("&EM_PROPERTY_TYPE"= "SAS7BDAT") %then %do;
15234 +                    lib= "%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))"
15235 +                %end;
15236 +                ;
15237 +        run;
15239 +        *** PRINT TO OUTPUT;
15241 +        title "%sysfunc(sasmsg(sashelp.dmine, save_results_title, NOQUOTE))";
15242 +        proc print data=&EM_USER_SAVEOUT label noobs; run;
15243 +        %EM_REPORT(key=SAVEOUT, viewtype=DATA, autodisplay=Y);
15244 +        title;
15246 +    %end;
15248 +    *** SAVE FORMATS **********************************************************;
15250 +    *** CHECK REPLACE CONSTRAINT FOR FORMATS;
15252 +    %if ((%sysfunc(cexist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._FORMATS)) and
15253 +        "&EM_PROPERTY_TYPE"="SAS7BDAT") and
15254 +        ("&EM_PROPERTY_REPLACE"="N"))
15255 +            %then %do;
15256 +                %put &EM_CODEBAR;
15257 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15258 +                %put &WARNING;
15259 +                %put &EM_CODEBAR;
15260 +                %goto quit;
15261 +            %end;
15263 +    %if ((%sysfunc(fileexist(&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt)) and
15264 +        "&EM_PROPERTY_TYPE" ne "SAS7BDAT") and
15265 +        ("&EM_PROPERTY_REPLACE"="N"))
15266 +           %then %do;
15267 +                %put &EM_CODEBAR;
15268 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15269 +                %put &WARNING;
15270 +                %put &EM_CODEBAR;
15271 +                %goto quit;
15272 +            %end;
15274 +    *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
15275 +    *** CONTINGENT ON FORMATS EXISTING;
15276 +    *** PARSE NODE VARIABLE SET FOR FORMATS;
15278 +    %let _FORMAT_FLAG = 0;
15279 +    data _formats;
15280 +        length format $32; /* AVOID MERGE VARIABLE LENGTH WARNING */
15281 +        set &EM_DATA_VARIABLESET(keep=format where=(format ne '')) end=eof;
15282 +        format = tranwrd(format, '.', '');
15283 +        if indexc(format, '$') then fmttype = 'C';
15284 +        else fmttype = 'N';
15285 +        if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
15286 +    run;
15287 +    %if (&_FORMAT_FLAG) %then %EM_SAVEXT_CATALOG(_formats);
15288 +    proc delete data=_formats; run;
15290 +    *** HOUSEKEEPING **********************************************************;
15292 +    %quit:
15294 +    %if ^(%sysfunc(libref(_em_save))) %then %do;
15295 +        libname &EM_PROPERTY_LIB clear;
15296 +    %end;
15298 +    %if (%sysfunc(exist(_save_output_temp))) %then %do;
15299 +        proc delete data=_save_output_temp; run;
15300 +    %end;
15302 +%mend EM_SAVEXT_TRAIN;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref _TRAIN has been deassigned.
NOTE: %INCLUDE (level 1) file _SAVUTIL is file SASHELP.EMUTIL.SAVEXT_MACROS.SOURCE.
15303 +*** UTILITY MACROS FOR EMSAVE NODE ********************************************;
15305 +*** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
15306 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15308 +%macro EM_SAVEXT_SAS(_SAVE_ROLE, _SAVE_SET);
15310 +    *** CHECK SAS SET NAME LENGTH;
15312 +    %if %symexist(EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
15313 +        %if ("&EM_SAVEXT_SAS_NAME_LENGTH"="") %then %let EM_SAVEXT_SAS_NAME_LENGTH=30;
15314 +    %end;
15315 +    %else %let EM_SAVEXT_SAS_NAME_LENGTH=30;                                /* 30 FOR OUTSIDE VENDOR LIBS */
15317 +    %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
15318 +        %put &EM_CODEBAR;
15319 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_namelengthsas_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
15320 +        %put &WARNING;
15321 +        %put &EM_CODEBAR;
15322 +        *** REVERTING TO DEFAULT NAME;
15323 +        %let EM_PROPERTY_NAME = em_save;
15324 +    %end;
15326 +    *** CHECK REPLACE CONSTRAINT FOR DATA SET;
15328 +    %if (%sysfunc(exist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE)) and
15329 +        ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15330 +        %put &EM_CODEBAR;
15331 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
15332 +        %put &WARNING;
15333 +        %put &EM_CODEBAR;
15334 +        %goto quit;
15335 +    %end;
15337 +    *** WRITE SAVED DATA SET;
15339 +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;
15341 +    data &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
15342 +        set &_SAVE_SET (obs=&EM_PROPERTY_OUTOBS);
15343 +        keep %EM_SAVEXT_VARS;
15344 +    run;
15346 +    *** WRITE RESULTS *********************************************************;
15347 +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
15349 +    %let _dsid=%sysfunc(open(&_SAVE_SET));
15350 +    %if &_dsid %then %do;
15351 +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
15352 +        %let _rc=%sysfunc(close(&_dsid));
15353 +        %if %eval(&_SAVE_NOBS < 0) %then %do;
15354 +            proc sql noprint;
15355 +                select count(*) into: _SAVE_NOBS
15356 +                from &_SAVE_SET;
15357 +            ;
15358 +            quit;
15359 +        %end;
15360 +    %end;
15361 +    %else %do;
15362 +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
15363 +        %put &EM_CODEBAR;
15364 +        %let ERROR2 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
15365 +        %put &ERROR2;
15366 +        %put &EM_CODEBAR;
15367 +        %goto quit;
15368 +    %end;
15370 +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
15371 +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
15372 +    %end;
15374 +    data _save_output_temp_record;
15375 +        length lib $20 name $255 nobs $20 outnobs $20 vars $20;
15376 +        vars=left("&EM_NUM_SAVEXT_VARS");
15377 +        outnobs=left("&EM_PROPERTY_OUTOBS");
15378 +        nobs=left("&_SAVE_NOBS");
15379 +        lib= left("&EM_PROPERTY_LIB");
15380 +        name=left("%sysfunc(pathname(&EM_PROPERTY_LIB))&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE)");
15381 +    run;
15383 +    proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
15384 +    proc delete data=_save_output_temp_record; run;
15386 +    *** HOUSEKEEPING **********************************************************;
15388 +    %quit:
15390 +    %if %symexist(_SAVE_NOBS) %then %do;
15391 +        data _null_;
15392 +            call symdel('_SAVE_NOBS', 'NOWARN');
15393 +        run;
15394 +    %end;
15396 +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
15397 +        data _null_;
15398 +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
15399 +        run;
15400 +    %end;
15402 +%mend EM_SAVEXT_SAS;
15404 +*** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
15405 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15407 +%macro EM_SAVEXT_PXPT(_SAVE_ROLE, _SAVE_SET);
15409 +    *** ACCOUNT FOR DEFAULT DIR;
15411 +    %if ("&EM_PROPERTY_DIRECTORYSELECTOR" = "") %then %let EM_PROPERTY_DIRECTORYSELECTOR = %nrbquote(&EM_NODEDIR);
15413 +    *** CHECK JMP NAME LENGTH;
15415 +    %if %symexist(EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
15416 +        %if ("&EM_SAVEXT_JMP_NAME_LENGTH"= "") %then %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
15417 +    %end;
15418 +    %else %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
15420 +    %if ("&EM_PROPERTY_TYPE"="JMP") %then %do;
15421 +        %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
15422 +            %put &EM_CODEBAR;
15423 +            %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_namelengthjmp_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
15424 +            %put &WARNING;
15425 +            %put &EM_CODEBAR;
15426 +            *** REVERTING TO DEFAULT NAME;
15427 +            %let EM_PROPERTY_NAME = em_save;
15428 +        %end;
15429 +    %end;
15431 +    *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
15433 +    %let _OUT_FILE_NAME=&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE);
15435 +    *** CHECK REPLACE CONSTRAINT;
15437 +    %if (%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15438 +        %put &EM_CODEBAR;
15439 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &_OUT_FILE_NAME));
15440 +        %put &WARNING;
15441 +        %put &EM_CODEBAR;
15442 +        %goto quit;
15443 +    %end;
15444 +    %else %if (^%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15445 +        %let _REPLACE= ;
15446 +    %end;
15447 +    %else %do;
15448 +        %let _REPLACE=replace;
15449 +    %end;
15451 +    *** EXCEL 2010 LIMITATIONS;
15452 +    *** CAN BE OVERRIDDEN BY STARTUP CODE;
15454 +    %if %symexist(_EXCEL_MAX_ROWS) %then %do;
15455 +        %if ("&_EXCEL_MAX_ROWS"= "") %then %let _EXCEL_MAX_ROWS= 1048575;
15456 +    %end;
15457 +    %else %let _EXCEL_MAX_ROWS= 1048575;
15459 +    %if %symexist(_EXCEL_MAX_COLS) %then %do;
15460 +        %if ("&_EXCEL_MAX_COLS"="") %then %let _EXCEL_MAX_COLS= 16384;
15461 +    %end;
15462 +    %else %let _EXCEL_MAX_COLS=16384;
15464 +    *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
15466 +    %let _dsid=%sysfunc(open(&_SAVE_SET));
15467 +    %if &_dsid %then %do;
15468 +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
15469 +        %let _rc=%sysfunc(close(&_dsid));
15470 +        %if %eval(&_SAVE_NOBS < 0) %then %do;
15471 +            proc sql noprint;
15472 +                select count(*) into: _SAVE_NOBS
15473 +                from &_SAVE_SET;
15474 +                ;
15475 +            quit;
15476 +        %end;
15477 +    %end;
15478 +    %else %do;
15479 +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&_SAVE_SET;
15480 +        %put &EM_CODEBAR;
15481 +        %let ERROR3 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &_SAVE_SET));
15482 +        %put &ERROR3;
15483 +        %put &EM_CODEBAR;
15484 +        %goto quit;
15485 +    %end;
15487 +    *** CHECK EXCEL FILE SIZE;
15489 +    %if ("&EM_PROPERTY_TYPE"="XLSX") and (%eval(&_SAVE_NOBS > &_EXCEL_MAX_ROWS) or %eval(&EM_NUM_SAVEXT_VARS > &_EXCEL_MAX_COLS)) %then %do;
15490 +        %put &EM_CODEBAR;
15491 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_excel_limit_warn, NOQUOTE, &_SAVE_SET));
15492 +        %put &WARNING;
15493 +        %put &EM_CODEBAR;
15494 +    %end;
15496 +    *** EXECUTE EXPORT ********************************************************;
15497 +    *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
15499 +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;      /* OTHERWISE ONLY EM_PROPERTY_OUTOBS WILL BE WRITTEN */
15501 +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
15502 +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
15503 +    %end;
15505 +    %if ("&EM_PROPERTY_TYPE"="TXT" or "&EM_PROPERTY_TYPE"="CSV") %then %do;
15507 +        *** SPECIAL CONDITION FOR TAB PROPERTY;
15509 +        %if ("&EM_PROPERTY_TYPE"="TXT") %then %let EM_PROPERTY_TYPE=tab;
15511 +        data _temp_save_view /view=_temp_save_view;
15512 +            set &_SAVE_SET;
15513 +            keep %EM_SAVEXT_VARS;
15514 +        run;
15516 +        %let SYSCC=0;
15517 +        proc export data=_temp_save_view(obs=&EM_PROPERTY_OUTOBS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
15518 +        run;
15519 +        quit;
15521 +    %end;
15522 +    %else %do;
15524 +        %let SYSCC=0;
15525 +        proc export data=&_SAVE_SET(obs=&EM_PROPERTY_OUTOBS keep=%EM_SAVEXT_VARS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
15526 +        run;
15527 +        quit;
15529 +    %end;
15531 +    %if (^&SYSCC=0) %then %do;
15532 +        %let EMEXCEPTIONSTRING=exception.server.IO.CREATE,&_OUT_FILE_NAME;
15533 +        %put &EM_CODEBAR;
15534 +        %let ERROR4 = %sysfunc(sasmsg(sashelp.dmine, IO.CREATE_ERR, NOQUOTE, &_OUT_FILE_NAME));
15535 +        %put &ERROR4;
15536 +        %put &EM_CODEBAR;
15537 +        %goto quit;
15538 +    %end;
15540 +    *** WRITE RESULTS *********************************************************;
15541 +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
15543 +    %if %sysfunc(fileexist(&_OUT_FILE_NAME)) %then %do;
15544 +        data _save_output_temp_record;
15545 +            length name $255 nobs $20 outnobs $20 vars $20;
15546 +            vars=left("&EM_NUM_SAVEXT_VARS");
15547 +            outnobs=left("&EM_PROPERTY_OUTOBS");
15548 +            nobs=left("&_SAVE_NOBS");
15549 +            name=left("&_OUT_FILE_NAME");
15550 +        run;
15551 +        proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
15552 +        proc delete data=_save_output_temp_record; run;
15553 +    %end;
15554 +    %else %do;
15555 +        %let EMEXCEPTIONSTRING=exception.server.IO.CANTREADFILE,&_OUT_FILE_NAME;
15556 +        %put &EM_CODEBAR;
15557 +        %let ERROR5 = %sysfunc(sasmsg(sashelp.dmine, IO.CANTREADFILE_ERR, NOQUOTE, &_OUT_FILE_NAME));
15558 +        %put &ERROR5;
15559 +        %put &EM_CODEBAR;
15560 +        %goto quit;
15561 +    %end;
15563 +    *** HOUSEKEEPING **********************************************************;
15565 +    %quit:
15567 +    %if ("&EM_PROPERTY_TYPE"="tab") %then %let EM_PROPERTY_TYPE=TXT;
15569 +    %if %sysfunc(exist(_temp_save_view, VIEW)) %then %do;
15570 +        proc datasets lib=work memtype=view nolist;
15571 +            delete _temp_save_view;
15572 +        run;
15573 +        quit;
15574 +    %end;
15576 +    %if %symexist(_SAVE_NOBS) %then %do;
15577 +        data _null_;
15578 +            call symdel('_SAVE_NOBS', 'NOWARN');
15579 +        run;
15580 +    %end;
15582 +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
15583 +        data _null_;
15584 +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
15585 +        run;
15586 +    %end;
15588 +%mend EM_SAVEXT_PXPT;
15590 +*** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
15591 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15593 +%macro EM_SAVEXT_CATALOG(_FORMATS);
15595 +    *** SORT AND REMOVE DUPLICATES;
15597 +    proc sort data=&_FORMATS nodupkey;
15598 +        by format;
15599 +    run;
15600 +    quit;
15602 +    *** RETRIEVE FORMAT LOCATION INFO AND ASSIGNED CATALOGS IN ACTIVE SESSION;
15604 +    proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne ''))
15605 +        out=_formats2(rename=(fmtname=format));
15606 +        by fmtname;
15607 +    run;
15608 +    quit;
15610 +    *** MERGE SAS FORMATS WITH LOCATION;
15612 +    data &_FORMATS;
15613 +        merge &_FORMATS(in=_a) _formats2(in=_b);
15614 +        by format;
15615 +        if _a and _b then output;
15616 +    run;
15618 +    *** IF &_FORMATS IS EMPTY AFTER MERGE THEN NO FORMATS BELONG TO THE SAVED SET;
15620 +    proc contents data=&_FORMATS out=_formats_content_temp noprint; run;
15621 +    data _null_;
15622 +        set _formats_content_temp (obs=1);
15623 +        if nobs > 0 then call symput('_USER_FORMATS_FLAG','1');
15624 +        else call symput('_USER_FORMATS_FLAG','0');
15625 +    run;
15626 +    %if (^&_USER_FORMATS_FLAG) %then %do;
15627 +        %put &EM_CODEBAR;
15628 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15629 +        %put &WARNING;
15630 +        %put &EM_CODEBAR;
15631 +        %goto quit;
15632 +    %end;
15634 +    *** SAVE FORMATS AS CATALOG OR TRANSPORT FORMAT;
15636 +    proc sort data=&_FORMATS;
15637 +        by libname memname;
15638 +    run;
15639 +    quit;
15641 +    *** WRITING CATALOG IN WORK AVOIDS OVERWRITING SAS CATALOG;
15642 +    *** FOR CASE REPLACE=N, TYPE ne SAS7BDAT;
15644 +    data _null_;
15645 +        set &_FORMATS end=eof;
15646 +        by libname memname;
15647 +        if first.libname or first.memname then do;
15648 +            call execute('proc catalog cat='|| strip(libname)||'.'||strip(memname)||';');
15649 +            call execute('copy out=work.&EM_PROPERTY_NAME._FORMATS et=format ;');
15650 +            call execute('select ');
15651 +        end;
15652 +        if strip(fmttype) eq 'C' then do;
15653 +            call execute(' '||strip(tranwrd(format, '$', ''))||'.formatc');
15654 +        end;
15655 +        else call execute(' '||strip(format)||'.format');
15656 +        if last.libname or last.memname then do;
15657 +            call execute(';');
15658 +            call execute('run;');
15659 +        end;
15660 +        if eof then call execute('quit;');
15661 +    run;
15663 +    %if ("&EM_PROPERTY_TYPE" = "SAS7BDAT") %then %do;
15664 +        proc copy in=work out=&EM_PROPERTY_LIB; select &EM_PROPERTY_NAME._FORMATS; run; quit;
15665 +    %end;
15666 +    %else %do;
15667 +        proc cport cat=work.&EM_PROPERTY_NAME._formats file="&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt"; run;
15668 +    %end;
15670 +    *** HOUSEKEEPING **********************************************************;
15672 +    proc datasets lib=work memtype=catalog nolist;
15673 +        delete &EM_PROPERTY_NAME._FORMATS;
15674 +    run;
15675 +    quit;
15677 +    %quit:
15679 +    proc delete data=_formats_content_temp; run;
15680 +    proc delete data=_formats2; run;
15682 +%mend EM_SAVEXT_CATALOG;
15684 +*** FIND VARIABLES TO KEEP ****************************************************;
15685 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15687 +%macro EM_SAVEXT_GET_VARS(_SAVE_ROLE, _SAVE_SET);
15689 +    %if("%sysfunc(strip(%upcase(&_SAVE_ROLE)))" ne "TRANSACTION") %then %do;
15691 +        *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
15693 +        proc contents data=&_SAVE_SET out=_input_vars(keep=name) noprint; run;
15694 +        proc sort data=_input_vars; by name; run;
15696 +        *** EXCLUDE REJECTED OR UNUSED VARIABLES;
15698 +        proc sort data=&EM_DATA_VARIABLESET
15699 +            (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
15700 +            by name;
15701 +        run;
15703 +        data _em_savext_vars;
15704 +            merge _input_vars(in=_a) _train_vars(in=_b);
15705 +            by name;
15706 +            keep name;
15707 +            if _a and _b then output;
15708 +        run;
15710 +        *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
15712 +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
15714 +        *** HOUSEKEEPING;
15716 +        proc delete data=_input_vars; run;
15717 +        proc delete data=_train_vars; run;
15718 +        proc delete data=_em_savext_vars; run;
15720 +    %end;
15721 +    %else %do; /* TRANSCATION TABLE VARIABLES ARE NOT LISTED IN THE TRAINING VARIABLE SET */
15723 +        proc contents data=&_SAVE_SET out=_em_savext_vars(keep=name) noprint; run;
15724 +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
15725 +        proc delete data=_em_savext_vars; run;
15727 +    %end;
15729 +%mend EM_SAVEXT_GET_VARS;
15731 +*** CHECKS IF A SET OR VIEW EXISTS ********************************************;
15732 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15734 +%macro EM_SAVEXT_SET_EXISTS(_DATASET);
15736 +    %if (%sysfunc(exist(&_DATASET)) or
15737 +        %sysfunc(exist(&_DATASET, VIEW))) and
15738 +        "&_DATASET" ne "" %then %do;
15739 +            %let _rc=1;
15740 +    %end;
15741 +    %else %do;
15742 +            %let _rc=0;
15743 +    %end;
15745 +    &_rc.
15747 +%mend EM_SAVEXT_SET_EXISTS;
15749 +*** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
15750 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15752 +%macro EM_SAVEXT_REGISTER(_DATASET, _ROLE, _i);
15754 +    _save_set="&_DATASET";
15755 +    _save_role="&_ROLE";
15756 +    _save_set_index=cats('_save_set', strip(put(&_i,1.)));
15757 +    _save_role_index=cats('_save_role', strip(put(&_i,1.)));
15758 +    call symput(_save_set_index, _save_set);
15759 +    call symput(_save_role_index, _save_role);
15761 +%mend EM_SAVEXT_REGISTER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref _SAVUTIL has been deassigned.
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK._INPUT_VARS has 10 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK._INPUT_VARS.
NOTE: The data set WORK._INPUT_VARS has 10 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
      WHERE (use='Y') or ((use='D') and (role not = 'REJECTED'));
NOTE: The data set WORK._TRAIN_VARS has 10 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 10 observations read from the data set WORK._INPUT_VARS.
NOTE: There were 10 observations read from the data set WORK._TRAIN_VARS.
NOTE: The data set WORK._EM_SAVEXT_VARS has 10 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Sun, May 12, 2019 05:45:31 PM,
      Last Modified=Sun, May 12, 2019 05:45:31 PM,
      Filename=C:\Users\dante\AppData\Local\Temp\SAS Temporary Files\_TD16492_DANTE-PC_\emutil.sas7bcat,
      Release Created=9.0401M3,
      Host Created=X64_8HOME
 
NOTE: 6 records were written to the file MACFILE.
      The minimum record length was 21.
      The maximum record length was 75.
NOTE: There were 10 observations read from the data set WORK._EM_SAVEXT_VARS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
15767 +%macro EM_SAVEXT_VARS;
15768 +"change_flag"n "change_percentage"n "close"n "date"n "high"n "low"n "open"n
15769 +"stock_code"n "trade_flag"n "vol"n
15770 +%mend EM_SAVEXT_VARS;
15771 +%global EM_NUM_SAVEXT_VARS;
15772 +%let EM_NUM_SAVEXT_VARS = 10 ;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref MACFILE has been deassigned.
 
NOTE: Deleting WORK._INPUT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TRAIN_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._EM_SAVEXT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: View EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 196 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 196 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: The data set AAEM61.STOCKS7_TRAIN has 196 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 196 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK._SAVE_OUTPUT_TEMP_RECORD has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Appending WORK._SAVE_OUTPUT_TEMP_RECORD to WORK._SAVE_OUTPUT_TEMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP_RECORD.
NOTE: The data set WORK._SAVE_OUTPUT_TEMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._SAVE_OUTPUT_TEMP_RECORD (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP.
NOTE: The data set EMWS1.EMSAVE_SAVEOUT has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.EMSAVE_SAVEOUT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
      WHERE format not = ' ';
NOTE: The data set WORK._FORMATS has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK._FORMATS.
NOTE: 5 observations with duplicate key values were deleted.
NOTE: The data set WORK._FORMATS has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set SASHELP.VFORMAT.
      WHERE (libname not = ' ') and (memname not = ' ');
NOTE: The data set WORK._FORMATS2 has 9 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.26 seconds
      cpu time            0.12 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK._FORMATS.
NOTE: There were 9 observations read from the data set WORK._FORMATS2.
NOTE: The data set WORK._FORMATS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK._FORMATS_CONTENT_TEMP has 4 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK._FORMATS_CONTENT_TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
WARNING: Format catalogs will not be overwritten.
*------------------------------------------------------------*
 
NOTE: Deleting WORK._FORMATS_CONTENT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._FORMATS2 (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._FORMATS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._SAVE_OUTPUT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15773
15774  *------------------------------------------------------------*;
15775  * End TRAIN: EMSave;
15776  *------------------------------------------------------------*;
 
15777  *------------------------------------------------------------*;
15778  * Close any missing semi colons;
15779  *------------------------------------------------------------*;
15780  ;
15781  ;
15782  ;
15783  ;
15784  quit;
15785  *------------------------------------------------------------*;
15786  * Close any unbalanced quotes;
15787  *------------------------------------------------------------*;
15788  /*; *"; *'; */
15789  ;
15790  run;
15791  quit;
15792  /* Reset EM Options */
15793  options formchar="|----|+|---+=|-/\<>*";
15794  options nocenter ls=256 ps=10000;
15795  goptions reset=all device=GIF NODISPLAY;
 
15796  proc sort data=WORK.EM_USER_REPORT;
15797  by ID VIEW;
15798  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 12, 2019
Time:                17:45:32
*------------------------------------------------------------*
15900  %let EMEXCEPTIONSTRING=;
15901  *------------------------------------------------------------*;
15902  * SCORE: EMSave;
15903  *------------------------------------------------------------*;
15904  %let EM_ACTION = SCORE;
15905  %let syscc = 0;
15906  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
15907
15908  %macro EM_SAVEXT_MAIN;
15909
15910     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
15911         filename _create catalog 'sashelp.emutil.savext_create.source';
15912         %include _create;
15913         filename _create;
15914         %EM_SAVEXT_CREATE;
15915     %end;
15916     %else
15917     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
15918         filename _train catalog 'sashelp.emutil.savext_train.source';
15919         %include _train;
15920         filename _train;
15921         %EM_SAVEXT_TRAIN;
15922     %end;
15923
15924  %mend EM_SAVEXT_MAIN;
15925
15926  %EM_SAVEXT_MAIN;
15927
15928  *------------------------------------------------------------*;
15929  * End SCORE: EMSave;
15930  *------------------------------------------------------------*;
 
15931  *------------------------------------------------------------*;
15932  * EMSave: Scoring DATA data;
15933  *------------------------------------------------------------*;
15934  data EMWS1.EMSave_TRAIN
15935  / view=EMWS1.EMSave_TRAIN
15936  ;
15937  set EMWS1.FIMPORT_train
15938  ;
15939  run;
 
NOTE: DATA STEP view saved on file EMWS1.EMSAVE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
15940  quit;
 
15942  *------------------------------------------------------------*;
15943  * EMSave: Computing metadata for TRAIN data;
15944  *------------------------------------------------------------*;
 
NOTE: View EMWS1.EMSAVE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS1.EMSAVE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 12, 2019
Time:                17:45:32
*------------------------------------------------------------*
16305  %let EMEXCEPTIONSTRING=;
16306  *------------------------------------------------------------*;
16307  * REPORT: EMSave;
16308  *------------------------------------------------------------*;
16309  %let EM_ACTION = REPORT;
16310  %let syscc = 0;
16311  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
16312
16313  %macro EM_SAVEXT_MAIN;
16314
16315     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
16316         filename _create catalog 'sashelp.emutil.savext_create.source';
16317         %include _create;
16318         filename _create;
16319         %EM_SAVEXT_CREATE;
16320     %end;
16321     %else
16322     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
16323         filename _train catalog 'sashelp.emutil.savext_train.source';
16324         %include _train;
16325         filename _train;
16326         %EM_SAVEXT_TRAIN;
16327     %end;
16328
16329  %mend EM_SAVEXT_MAIN;
16330
16331  %EM_SAVEXT_MAIN;
16332
16333  *------------------------------------------------------------*;
16334  * End REPORT: EMSave;
16335  *------------------------------------------------------------*;
 
16336  /* Reset EM Options */
16337  options formchar="|----|+|---+=|-/\<>*";
16338  options nocenter ls=256 ps=10000;
16339  goptions reset=all device=GIF NODISPLAY;
 
