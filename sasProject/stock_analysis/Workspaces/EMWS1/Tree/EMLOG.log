*------------------------------------------------------------*
User:                dante
Date:                May 12, 2019
Time:                22:32:02
Site:                12600285
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                May 12, 2019
Time:                22:31:58
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.TreeMETA;
14718  run;
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
14719  proc print data=WORK.TreeMETA label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14755  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14756  length ORDER $20;
14757  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14758     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14759  set EMWS1.IDS2_TRADE_FLAG_DM( where=(_TYPE_="TARGET"));
14760  NumLevels=3;
14761  select(upcase(ORDER));
14762  when('DESC') ORDER = 'Descending';
14763  when('ASC') ORDER = 'Ascending';
14764  when('FMTDESC') ORDER = 'Formatted Descending';
14765  when('FMTASC') ORDER = 'Formatted Ascending';
14766  otherwise ORDER = 'Descending';
14767  end;
14768  output;
14769  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TRADE_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
14770  title9 ' ';
14771  proc print data=WORK.Tree_EVENT noobs label;
14772  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14773  title9 ' ';
14774  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14775  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14776  title10;
 
"No decisions defined for target "trade_flag"."
14777  proc print data = EMWS1.Ids2_trade_flag_DM noobs label;
14778  var _type_ variable label;
14779  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14780  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14781  title9 ' ';
14782  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14783  run;
 
NOTE: There were 9 observations read from the data set EMWS1.IDS2_TRADE_FLAG_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14784  title10;
 
14785  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15330  *------------------------------------------------------------*;
15331  * Tree: Generation of macros and macro variables;
15332  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15333  *------------------------------------------------------------*;
 
15334  %let EMEXCEPTIONSTRING=;
15335  *------------------------------------------------------------*;
15336  * TRAIN: Tree;
15337  *------------------------------------------------------------*;
15338  %let EM_ACTION = TRAIN;
15339  %let syscc = 0;
15340  %macro main;
15341
15342    %if %upcase(&EM_ACTION) = CREATE %then %do;
15343      filename temp catalog 'sashelp.emmodl.tree_create.source';
15344      %include temp;
15345      filename temp;
15346
15347      %em_tree_create;
15348    %end;
15349
15350     %else
15351     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15352
15353         filename temp catalog 'sashelp.emmodl.tree_train.source';
15354         %include temp;
15355         filename temp;
15356         %em_tree_train;
15357     %end;
15358
15359    %else
15360    %if %upcase(&EM_ACTION) = SCORE %then %do;
15361      filename temp catalog 'sashelp.emmodl.tree_score.source';
15362      %include temp;
15363      filename temp;
15364
15365      %em_tree_score;
15366
15367    %end;
15368
15369    %else
15370    %if %upcase(&EM_ACTION) = REPORT %then %do;
15371
15372         filename temp catalog 'sashelp.emmodl.tree_report.source';
15373         %include temp;
15374         filename temp;
15375
15376         %em_tree_report;
15377     %end;
15378
15379    %else
15380    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15381
15382         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15383         %include temp;
15384         filename temp;
15385         %EM_TREE_OPENTREEVIEWER;
15386
15387     %end;
15388
15389    %else
15390    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15391
15392         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15393         %include temp;
15394         filename temp;
15395         %EM_TREE_CLOSETREEVIEWER;
15396
15397     %end;
15398
15399
15400     %doendm:
15401  %mend main;
15402
15403  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15405 +%macro em_tree_train;
15407 +   %if &EM_IMPORT_DATA eq %then %do;
15408 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15409 +       %put &em_codebar;
15410 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15411 +       %put &errormsg;
15412 +       %put &em_codebar;
15413 +       %goto doendm;
15414 +   %end;
15415 +   %else
15416 +       %let EMEXCEPTIONSTRING =;
15418 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15419 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15420 +        %put &em_codebar;
15421 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15422 +        %put &errormsg;
15423 +        %put &em_codebar;
15424 +        %goto doendm;
15425 +   %end;
15427 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15428 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15429 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15430 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15431 +        %put &em_codebar;
15432 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15433 +        %put &errormsg;
15434 +        %put &em_codebar;
15435 +        %goto doendm;
15436 +   %end;
15438 +   /* Initialize property macro variables */
15439 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15440 +   %include temp;
15441 +   filename temp;
15443 +   %EM_SetProperties;
15445 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15446 +   %EM_GETNAME(key=EMTREE, type=DATA);
15447 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15448 +     /* if import eq Y and no importtable defined, throw an exception */
15449 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15450 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15451 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15452 +         %put &em_codebar;
15453 +         %put &errmsg;
15454 +         %put &em_codebar;
15455 +         %goto doendm;
15456 +      %end;
15457 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15458 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15459 +         %put &em_codebar;
15460 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15461 +         %put &errormsg;
15462 +         %put &em_codebar;
15463 +         %goto doendm;
15464 +      %end;
15465 +      %else %do;
15466 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15467 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15468 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15469 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15470 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15471 +         %let dsid = %sysfunc(close(&dsid));
15472 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15473 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15474 +            %put &em_codebar;
15475 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15476 +            %put &errormsg;
15477 +            %put &em_codebar;
15478 +            %goto doendm;
15479 +         %end;
15480 +      %end;
15481 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15482 +         proc delete data=&EM_USER_EMTREE;
15483 +         run;
15484 +      %end;
15485 +   %end;
15486 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15487 +      proc delete data=&EM_USER_EMTREE;
15488 +      run;
15489 +   %end;
15491 +   /* load tree macros */
15492 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15493 +   %include temp;
15494 +   filename temp;
15496 +   /* data sets */
15497 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15498 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15499 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15501 +   /* files */
15502 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15504 +   /* check actual num of target levels */
15505 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15506 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15507 +                              nLevel=_nTargetLevel );
15508 +      %if &_nTargetLevel  > 2 %then %do;
15509 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15510 +        %put &em_codebar;
15511 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15512 +        %put &errormsg;
15513 +        %put &em_codebar;
15514 +        %goto doendm;
15515 +      %end;
15516 +   %end;
15518 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15519 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15520 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15521 +        %let costflag=0;
15522 +        data _null_;
15523 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15524 +          if eof then call symput("costflag", _N_);
15525 +        run;
15526 +        %if &costflag gt 0 %then %do;
15527 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15528 +          %put &em_codebar;
15529 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15530 +          %put &errormsg;
15531 +          %put &em_codebar;
15532 +          %goto doendm;
15533 +       %end;
15534 +     %end;
15535 +   %end;
15537 +   /* determine if multiple targets will be processed */
15538 +   %let em_tree_multipleTargets=N;
15539 +   %let em_tree_numTarget = 1;
15540 +   %let em_tree_targetVars=;
15542 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15543 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15544 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15545 +         %let em_tree_multipleTargets=N;
15546 +      %end;
15547 +      %else %do;
15548 +         /* create macro array of targets  */
15549 +         data _null_;
15550 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15551 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15552 +           if eof then
15553 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15554 +        run;
15556 +        %if &em_tree_numTarget gt 1 %then %do;
15557 +           %let em_tree_multipleTargets=Y;
15558 +        %end;
15559 +      %end;
15560 +   %end;
15562 +   /* create view of only necessary variable for performance reasons */
15563 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15564 +   data &tempData / view=&tempData;
15565 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15566 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15567 +       %EM_TARGET
15568 +     %end;
15569 +     %else %do;
15570 +       %if &em_tree_numTarget ne 0 %then %do;
15571 +         %do i=1 %to &em_tree_numTarget;
15572 +            &&em_tree_targetVars&i
15573 +         %end;
15574 +       %end;
15575 +     %end;
15576 +     );
15577 +   run;
15579 +   /* run Tree procedure */
15580 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15582 +   /* Check return code and throw exception if error is detected */
15583 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15584 +   %if &syserr %then %do;
15585 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15586 +     %goto doendm;
15587 +   %end;
15589 +   /* add decision score code if multiple targets are processed */
15590 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15591 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15592 +   %end;
15594 +   /* create outfit dataset if multiple score statements have been executed */
15595 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15597 +   /* create English Rules */
15598 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15599 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15600 +       %em_tree_makeEnglishRules;
15602 +       /* English Rules */
15603 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15605 +     %end;
15606 +   filename x;
15608 +   %doendm:
15609 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15610 +%macro EM_SetProperties;
15612 +   /* train properties */
15613 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15655 +   /* properties for interactive sample */
15656 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15661 +   /* report properties */
15662 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15676 +   /* score properties */
15677 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15680 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15682 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15683 +  %global &nLevel;
15684 +  proc dmdb batch data=&indata
15685 +    classout=_tmp_dmdbout;
15686 +    class &target;
15687 +  run;
15688 +  data _tmp_dmdbout;
15689 +    set _tmp_dmdbout;
15690 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15691 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15692 +  run;
15693 +  data _null_;
15694 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15695 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15696 +    %let dsid = %sysfunc(close(&dsid));
15697 +     call symput("&nLevel", put(&_obs, Best12.));
15698 +  run;
15700 +  proc datasets lib=work nolist;
15701 +     delete _tmp_dmdbout;
15702 +  run;
15703 +  quit;
15704 +%Mend EM_CheckBinaryTargetLevel;
15707 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15709 +  /* determine the number of obs in training data */
15710 +  proc sql;
15711 +    reset noprint;
15712 +    select count(*) into :em_nobs from &indata;
15713 +  quit;
15715 +  /* determine the number of input variables */
15716 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15717 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15719 +  /* retrieve targetEvent from decmeta */
15720 +  %let targetEvent=;
15721 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15722 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15723 +      data _null_;
15724 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15725 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15726 +      run;
15727 +    %end;
15728 +  %end;
15730 +  /* create targetTable if multipleTar eq Y */
15731 +  data temptarget;
15732 +    set &EM_DATA_VARIABLESET;
15733 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15734 +  run;
15736 + /* data sets */
15737 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15738 + %EM_GETNAME(key=EMTREE,        type=DATA);
15739 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15740 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15741 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15742 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15743 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15744 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15745 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15746 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15748 + /* files */
15749 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15750 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15752 + /* turn on pmml if requested */
15753 + %let nnpmml=0;
15754 + %if %symexist(EM_PMML) %then %do;
15755 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15756 +       %let nnpmml=1;
15758 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15759 +%end;
15761 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15763 + %if &nnpmml or &numClassTarget %then %do;
15765 +       /* create dmdb needed for pmml generation */
15766 +       %let tree_maxlevel = 512;
15767 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15768 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15769 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15770 +         %end;
15771 +       %end;
15772 +       %if &tree_maxlevel gt 0 %then %do;
15773 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15774 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15775 +       %end;
15777 +       %let targetOrderString =;
15778 +       %let targetString = ;
15779 +       data _null_;
15780 +          length orderString nameString $10000;
15781 +          retain orderString nameString;
15782 +          set &em_data_variableset end=eof;
15783 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15784 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15785 +          %end;
15786 +          %else %do;
15787 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15788 +          %end;          select(order);
15789 +            when('')        order ='DESC';
15790 +            when('FMTASC')  order='ASCFMT';
15791 +            when('FMTDESC') order='DESFMT';
15792 +            otherwise;
15793 +          end;
15794 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15795 +          nameString = trim(nameString)!!' '!!trim(NAME);
15797 +          if eof then do;
15798 +             call symput('targetOrderString', trim(orderString));
15799 +             call symput('targetString', trim(nameString));
15800 +          end;
15801 +       run;
15803 +       %let arborkluge= "work._treeDMDB";
15805 +       proc dmdb batch data=&indata
15806 +       %if &nnpmml %then %do;
15807 +           PMML
15808 +       %end;
15809 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15812 +   %if &nnpmml %then %do;
15813 +        %if "%EM_ID" ne "" %then %do;
15814 +          id %EM_ID;
15815 +        %end;
15816 +        %if &EM_NUM_CLASS gt 0 %then %do;
15817 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15818 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15819 +               &targetOrderString;
15820 +        %end;
15821 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15822 +          var %EM_INTERVAL;
15823 +        %end;
15824 +        target &targetString %EM_INTERVAL_TARGET;
15825 +        %if "%EM_FREQ" ne "" %then %do;
15826 +          freq %EM_FREQ;
15827 +        %end;
15828 +  %end;
15829 +  %else %do;
15830 +      class  &targetOrderString;
15831 +      target &targetString %EM_INTERVAL_TARGET;
15832 +  %end;
15833 +       run;
15834 +       quit;
15836 +       proc datasets lib=work nolist;
15837 +          delete classout varout;
15838 +       run;
15839 +       quit;
15841 +    %end;
15842 + %end;
15844 + /* run Arbor procedure */
15845 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15846 +  proc arbor data=&INDATA
15848 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15849 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15850 +  %end;
15852 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15853 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15854 +  %end;
15856 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15857 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15858 +  %end;
15860 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15861 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15862 +  %end;
15864 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15865 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15866 +  %end;
15868 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15869 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15870 +  %end;
15871 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15872 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15873 +  %end;
15874 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15875 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15876 +  %end;
15878 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15879 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15880 +      alpha = &EM_PROPERTY_SIGLEVEL
15881 +    %end;
15882 +  %end;
15884 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15885 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15886 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15887 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15888 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15890 +        padjust =
15891 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15892 +          &chaid
15893 +        %end;
15894 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15895 +          DEPTH
15896 +        %end;
15897 +      %end;
15898 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15899 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15900 +         pvars = &num_inputs
15901 +      %end;
15902 +    %end;
15903 +  %end;
15904 +  %else %do;
15905 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15906 +         padjust = NONE
15907 +      %end;
15908 +  %end;
15910 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15911 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15912 +    Maxrules = &num_nrules
15913 +  %end;
15915 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15916 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15917 +    Maxsurrs = &num_nsurrs
15918 +  %end;
15920 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15921 +     Missing=&EM_PROPERTY_MISSINGVALUE
15922 +  %end;
15924 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15925 +     USEVARONCE
15926 +  %end;
15928 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15929 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15930 +  %end;
15933 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15934 +    event = "&targetEvent"
15935 +  %end;
15937 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15938 +     DECSEARCH
15939 +  %end;
15941 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15942 +     PRIORSSEARCH
15943 +  %end;
15945 +  %if &arbor_1 ne %then %do;
15946 +    &arbor_1
15947 +  %end;
15949 +  %if &em_arbor ne %then %do;
15950 +     &em_arbor
15951 +  %end;
15952 +  ;
15953 + %end;
15954 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15955 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15956 +       interact;
15957 + %end;
15958 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15959 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15960 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15961 +    %put &em_codebar;
15962 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15963 +    %put &errormsg;
15964 +    %put &em_codebar;
15965 +    %goto doendm;
15966 +   %end;
15967 +   %else %do;
15968 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15969 +       interact;
15970 +   %end;
15971 + %end;
15973 + %else %do;
15974 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15975 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15976 +    %put &em_codebar;
15977 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15978 +    %put &errormsg;
15979 +    %put &em_codebar;
15980 +    %goto doendm;
15981 +   %end;
15982 +   %else %do;
15983 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15984 +        interact;
15985 +   %end;
15986 + %end;
15988 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15989 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15990 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15991 +    %end;
15993 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15994 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15995 +    %end;
15997 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15998 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15999 +    %end;
16001 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16002 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16003 +    %end;
16005 +    %if "%EM_FREQ" ne "" %then %do;
16006 +       freq %EM_FREQ;
16007 +    %end;
16009 +    %if "&multipleTar" eq "Y" %then %do;
16010 +       /* cycle through all target vars in variableset */
16011 +       %let tdsid = %sysfunc(open(temptarget));
16012 +       %if &tdsid %then %do;
16013 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16014 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16015 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16016 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16017 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16018 +             target &var / level = &lvl
16019 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16020 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16021 +             %end;
16022 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16023 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16024 +             %end;
16025 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16026 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16027 +             %end;
16028 +          %end;
16029 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16030 +       %end;
16031 +       useTarget variable = %EM_TARGET;
16032 +    %end;
16033 +    %else %do;
16034 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16035 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16036 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16037 +      %end;
16038 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16039 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16040 +      %end;
16041 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16042 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16043 +      %end;
16044 +    %end;
16046 +    %if "&multipleTar" eq "N" %then %do;
16047 +      &EM_DEC_STATEMENT;
16048 +    %end;
16050 +    Performance &EM_PROPERTY_PERFORMANCE
16051 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16052 +      nodesize=&EM_PROPERTY_NODESAMPLE
16053 +    %end;
16054 +    ;
16056 +    %if "&intFlag" eq "Y" %then %do;
16057 +       INTERACT Largest;
16058 +       Train maxnewdepth=0;
16059 +    %end;
16061 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16062 +         Assess
16063 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16064 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16065 +              %put &em_codebar;
16066 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16067 +              %put &errormsg;
16068 +              %put &em_codebar;
16069 +            %end;
16070 +            %else %do;
16071 +               Validata=&EM_IMPORT_VALIDATE
16072 +            %end;
16073 +         %end;
16074 +         %else %do;
16075 +           NoValidata
16076 +         %end;
16077 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16078 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16079 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16080 +               %if &dsid %then %do;
16081 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16082 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16083 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16084 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16085 +                   %else %do;
16086 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16087 +                      %else %let measure= MISC;
16088 +                   %end;
16089 +                 %end;
16090 +               %end;
16091 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16092 +            %end;
16093 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16094 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16095 +                 %let measure=ASE;
16096 +              %end;
16097 +              %else %do;
16098 +                 %let measure=MISC;
16099 +              %end;
16100 +            %end;
16101 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16102 +              %let measure=ASE;
16103 +            %end;
16104 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16105 +               %let measure = LIFT;
16106 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16107 +               %if &dsid %then %do;
16108 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16109 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16110 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16111 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16112 +                 %end;
16113 +               %end;
16114 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16115 +            %end;
16116 +            measure=&measure
16117 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16118 +               event = "&targetEvent"
16119 +            %end;
16120 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16121 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16122 +            %end;
16123 +         %end;
16124 +         %if "&multipleTar" eq "N" %then %do;
16125 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16126 +               CV
16127 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16128 +                 CVNITer = &EM_PROPERTY_CVNITER
16129 +               %end;
16130 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16131 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16132 +               %end;
16133 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16134 +                 CVSeed = &EM_PROPERTY_CVSEED
16135 +               %end;
16136 +            %end;
16137 +         %end;
16138 +       %end;
16139 +      ;
16141 +      %if "&intFlag" ne "Y" %then %do;
16142 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16143 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16144 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16145 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16147 +          SUBTREE &subtree
16148 +          %if "&subtree" eq "NLEAVES" %then %do;
16149 +            =&EM_PROPERTY_NSUBTREE
16150 +          %end;
16151 +          ;
16152 +        %end;
16154 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16155 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16156 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16157 +          %end;
16158 +       %end;
16159 +      %end;
16160 + %end;
16163 + MakeMacro nleaves = nleaves;
16164 + save
16165 + %if "&EM_USER_EMTREE" ne "" %then %do;
16166 +   MODEL=&EM_USER_EMTREE
16167 + %end;
16168 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16169 +   SEQUENCE=&EM_USER_OUTSEQ
16170 + %end;
16171 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16172 +   IMPORTANCE=&EM_USER_OUTIMPORT
16173 + %end;
16174 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16175 +   NODESTAT=&EM_USER_OUTNODES
16176 + %end;
16177 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16178 +   SUMMARY=&EM_USER_OUTSUMMARY
16179 + %end;
16180 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16181 +   STATSBYNODE=&EM_USER_OUTSTATS
16182 + %end;
16183 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16184 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16185 + %end;
16186 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16187 +   Pathlistnonmissing=&EM_USER_OUTPATH
16188 + %end;
16189 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16190 +   RULES = &EM_USER_OUTRULES
16191 + %end;
16192 + ;
16194 + %if "&intFlag" ne "Y" %then %do;
16196 +   %let lookupString = ;
16197 +   %if ^%symexist(EM_OPTION) %then
16198 +      %let EM_OPTION=;
16200 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16201 +      %let lookupString = LOOKUP=SELECT;
16202 +   %end;
16204 +   %let codetext=;
16205 +   %let norescodetxt=;
16207 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16208 +     %let codetext=&codetext DUMMY;
16209 +     %let norescodetxt=&norescodetxt DUMMY;
16210 +   %end;
16211 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16212 +     %let codetext=&codetext NOLEAFID;
16213 +     %let norescodetxt=&norescodetxt NOLEAFID;
16214 +   %end;
16215 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16216 +     %let norescodetxt=&norescodetxt NOPRED;
16217 +   %end;
16219 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16220 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16222 +   %if &nnpmml %then %do;
16223 +     code pmml;
16224 +   %end;
16226 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16227 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16228 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16229 +   %end;
16230 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16231 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16232 +   %end;
16233 + %end;
16235 + run;
16236 + quit;
16238 + /*%em_checkerror(); */
16239 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16240 +   /* Delete DMDB catalog */
16241 +   proc datasets lib=work nolist;
16242 +       delete _treeDMDB / mt=cat;
16243 +  run;
16244 +  %end;
16246 + %if &nnpmml %then %do;
16247 +    ods pmml close;
16248 + %end;
16250 +  %doendm:
16252 +%mend em_tree_runTreeProcedure;
16254 +%macro em_tree_createFitStats( multipleTar= );
16257 +  /* create targetTable is multipleTar eq Y */
16258 +  data temptarget;
16259 +    set &EM_DATA_VARIABLESET;
16260 +    where ROLE="TARGET";
16261 +  run;
16263 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16264 +   data &EM_USER_EMOUTFIT;
16265 +     length target $32;
16266 +     merge work.fit_train
16267 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16268 +       work.fit_valid
16269 +     %end;
16270 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16271 +       work.fit_test
16272 +     %end;
16273 +     ;
16274 +     %if "&multipleTar" eq "N" %then %do;
16275 +       target="%EM_TARGET";
16276 +     %end;
16277 +     %else %do;
16278 +       target = _TARGET_;
16279 +     %end;
16280 +     drop _NW_ _SUMW_
16281 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16282 +        _VSUMW_
16283 +     %end;
16284 +     ;
16285 +   run;
16287 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16288 +     proc datasets library=work nolist;
16289 +       delete fit_valid;
16290 +     run;
16291 +   %end;
16292 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16293 +     proc datasets library=work nolist;
16294 +       delete fit_test;
16295 +     run;
16296 +   %end;
16298 +%mend em_tree_createFitStats;
16301 +%macro em_tree_makeEnglishRules;
16303 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16304 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16306 +  /* verify that necessary tables exist and if not, skip processing */
16307 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16308 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16309 +    %goto doendm;
16310 +  %end;
16311 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16312 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16313 +    %goto doendm;
16314 +  %end;
16316 +  /* determine length of variable in outpath dataset */
16317 +  %let vlength= ;
16318 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16319 +  %if &dsid ne %then %do;
16320 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16321 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16322 +  %end;
16323 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16325 +  data tempoutpath;
16326 +    length varname $&vlength;
16327 +    retain varname;
16328 +    set &EM_USER_OUTPATH;
16330 +    if ^missing(variable) then varname=variable;
16331 +    else if ^missing(var_name) then varname=var_name;
16332 +    output;
16333 +  run;
16335 +  /* create an array of generated predicted variable names */
16336 +  %let tree_pred_vars = ;
16337 +  %let tree_pred_label = ;
16338 +  %let numpred= 0;
16339 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16341 +    data _null_;
16342 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16343 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16344 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16345 +     if eof then
16346 +       call symput('numpred', strip(put(_N_, BEST.)));
16347 +    run;
16348 +  %end;
16350 +  /* determine if NPRIORS exists in outnodes  */
16351 +  %local nprior_flag;
16352 +  data _null_;
16353 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16354 +    if eof then do;
16355 +      call symput('nprior_flag', strip(put(npriors, best.)));
16356 +    end;
16357 +  run;
16359 +  proc sort data=tempoutpath; by node; run;
16360 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16362 +  data tempoutpath;
16363 +    merge tempoutpath(in=_a) outnodes(keep= node
16364 +    %if "&nprior_flag" ne "." %then %do;
16365 +      NPRIORS
16366 +    %end;
16367 +    %else %do;
16368 +      N
16369 +    %end;
16370 +    %if &numpred gt 0 %then %do;
16371 +      %do i=1 %to &numpred;
16372 +        &&tree_pred_vars&i
16373 +      %end;
16374 +    %end;
16375 +    );
16376 +    by node;
16377 +    if _a;
16378 +  run;
16380 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16382 +  data _null_;
16383 +    file x;
16384 +    set tempoutpath;
16385 +    by node descending varname;
16386 +    retain origvar oldnode string;
16387 +    length origvar $32 oldnode 8 string $200;
16389 +    if _N_ = 1 then do;
16390 +      origvar = varname;
16391 +      oldnode = node;
16392 +    end;
16394 +    if first.node then do;
16395 +       put "&EM_CODEBAR";
16396 +       put " Node = " node;
16397 +       put "&EM_CODEBAR";
16398 +    end;
16400 +      if first.varname then do;
16401 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16402 +            if MISSING(CHARACTER_VALUE) then do;
16403 +             if NUMERIC_VALUE ne .  then do;
16404 +              if ^first.node then do;
16405 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16406 +              end;
16407 +              else do;
16408 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16409 +              end;
16410 +             end;
16411 +            end;
16412 +            else do;
16413 +              if ^first.node then do;
16414 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16415 +              end;
16416 +              else do;
16417 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16418 +              end;
16419 +             end;
16420 +         end;
16421 +         else if RELATION in ("=") then do;
16422 +            if ^first.node then do;
16423 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16424 +            end;
16425 +            else do;
16426 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16427 +            end;
16428 +         end;
16429 +         else if RELATION in ("ISMISSING") then do;
16430 +            if ^first.node then do;
16431 +              string = " AND "|| strip(varname) || " equals Missing";
16432 +            end;
16433 +            else do;
16434 +              string = "if "|| strip(varname) ||" equals Missing";
16435 +            end;
16436 +         end;
16437 +         else if RELATION in ("ISNOTMISSING") then do;
16438 +            if ^first.node then do;
16439 +              string = " AND "|| strip(varname) || " equals All Values";
16440 +            end;
16441 +            else do;
16442 +              string = "if "|| strip(varname) ||" equals All Values";
16443 +            end;
16444 +         end;
16445 +         if ^missing(varname) then origvar = varname;
16446 +         oldnode=node;
16448 +      end;
16449 +      else do;
16450 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16451 +          if MISSING(CHARACTER_VALUE) then do;
16452 +           if  NUMERIC_VALUE ne .  then do;
16453 +            if ^MISSING(string) then
16454 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16455 +            else
16456 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16457 +           end;
16458 +          end;
16459 +          else do;
16460 +            if ^MISSING(string) then
16461 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16462 +            else
16463 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16464 +          end;
16466 +         end;
16467 +         else if RELATION in ("=") then do;
16468 +           string = strip(string)||", "||strip(character_value);
16469 +         end;
16470 +         else if RELATION in ("ISMISSING") then do;
16472 +         end;
16473 +         if ^missing(varname) then origvar = varname;
16474 +         oldnode=node;
16475 +      end;
16476 +      if last.varname then do;
16477 +         if RELATION in ("ISMISSING") then do;
16478 +           if ^first.varname then do;
16479 +             string = strip(string) || " or MISSING";
16480 +           end;
16481 +         end;
16482 +         put string;
16483 +         if ^missing(varname) then origvar = varname;
16484 +         oldnode=node;
16485 +      end;
16487 +      if last.node then do;
16488 +         put "then ";
16489 +         put " Tree Node Identifier   = " node;
16491 +         %if "&nprior_flag" ne "." %then %do;
16492 +           put " Number of Observations = " NPRIORS;
16493 +         %end;
16494 +         %else %do;
16495 +           put " Number of Observations = " N;
16496 +         %end;
16498 +         %if &numpred gt 0 %then %do;
16499 +           %do i=1 %to &numpred;
16500 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16501 +           %end;
16502 +         %end;
16504 +         put " ";
16505 +         if ^missing(varname) then origvar = varname;
16506 +         oldnode=node;
16507 +      end;
16509 +  run;
16511 +  proc datasets lib=work nolist;
16512 +    delete tempoutpath outnodes;
16513 +  run;
16515 +  %doendm:
16516 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 135 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TRADE_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 135   Memory used = 511K.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: There were 135 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 135 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 3 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1596687 kilobytes of physical memory.
NOTE: Will use 135 out of 135 training cases.
NOTE: Using memory pool with 59854848 bytes.
NOTE: Passed training data 9 times.
NOTE: Training used 37736 bytes of work memory.
NOTE: The subtree sequence contains 5 subtrees. The largest has 9 nodes and 5 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Created macro variable NLEAVES equal to 4.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 7 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 425 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 7 observations and 27 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 29 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 118 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 5 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 63 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 32 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 7 observations and 5 variables.
NOTE: External file C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 135 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.09 seconds
 
NOTE: There were 135 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 135 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 3 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.18 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 29 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.IDS2_TRADE_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 29 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 7 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 7 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 29 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 29 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      224:176   234:190   380:191   387:195
NOTE: The file X is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=12May2019:22:31:59,
      Create Time=12May2019:22:31:59
 
NOTE: 49 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 29 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16518
16519  *------------------------------------------------------------*;
16520  * End TRAIN: Tree;
16521  *------------------------------------------------------------*;
 
16522  *------------------------------------------------------------*;
16523  * Close any missing semi colons;
16524  *------------------------------------------------------------*;
16525  ;
16526  ;
16527  ;
16528  ;
16529  quit;
16530  *------------------------------------------------------------*;
16531  * Close any unbalanced quotes;
16532  *------------------------------------------------------------*;
16533  /*; *"; *'; */
16534  ;
16535  run;
16536  quit;
16537  /* Reset EM Options */
16538  options formchar="|----|+|---+=|-/\<>*";
16539  options nocenter ls=256 ps=10000;
16540  goptions reset=all device=GIF NODISPLAY;
 
16541  proc sort data=WORK.EM_USER_REPORT;
16542  by ID VIEW;
16543  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 12, 2019
Time:                22:31:59
*------------------------------------------------------------*
16645  %let EMEXCEPTIONSTRING=;
16646  *------------------------------------------------------------*;
16647  * SCORE: Tree;
16648  *------------------------------------------------------------*;
16649  %let EM_ACTION = SCORE;
16650  %let syscc = 0;
16651  %macro main;
16652
16653    %if %upcase(&EM_ACTION) = CREATE %then %do;
16654      filename temp catalog 'sashelp.emmodl.tree_create.source';
16655      %include temp;
16656      filename temp;
16657
16658      %em_tree_create;
16659    %end;
16660
16661     %else
16662     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16663
16664         filename temp catalog 'sashelp.emmodl.tree_train.source';
16665         %include temp;
16666         filename temp;
16667         %em_tree_train;
16668     %end;
16669
16670    %else
16671    %if %upcase(&EM_ACTION) = SCORE %then %do;
16672      filename temp catalog 'sashelp.emmodl.tree_score.source';
16673      %include temp;
16674      filename temp;
16675
16676      %em_tree_score;
16677
16678    %end;
16679
16680    %else
16681    %if %upcase(&EM_ACTION) = REPORT %then %do;
16682
16683         filename temp catalog 'sashelp.emmodl.tree_report.source';
16684         %include temp;
16685         filename temp;
16686
16687         %em_tree_report;
16688     %end;
16689
16690    %else
16691    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16692
16693         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16694         %include temp;
16695         filename temp;
16696         %EM_TREE_OPENTREEVIEWER;
16697
16698     %end;
16699
16700    %else
16701    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16702
16703         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16704         %include temp;
16705         filename temp;
16706         %EM_TREE_CLOSETREEVIEWER;
16707
16708     %end;
16709
16710
16711     %doendm:
16712  %mend main;
16713
16714  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16716 +%macro em_tree_score;
16718 +   /* determine if multiple targets will be processed */
16719 +   %let em_tree_multipleTargets=N;
16720 +   %let em_tree_numTarget=1;
16721 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16722 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16723 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16724 +         %let em_tree_multipleTargets=N;
16725 +      %end;
16726 +      %else %do;
16727 +         /* create macro array of targets  */
16728 +         data _null_;
16729 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16730 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16731 +           if eof then
16732 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16733 +        run;
16735 +        %if &em_tree_numTarget gt 1 %then %do;
16736 +           %let em_tree_multipleTargets=Y;
16737 +        %end;
16738 +      %end;
16739 +   %end;
16741 +   /* build flow and publish scoring code */
16742 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16743 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16745 +   filename treeflow "&EM_USER_TREEFLOW";
16746 +   filename treepub "&EM_USER_TREEPUBLISH";
16748 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16749 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16751 +   %em_copyfile(infref=treeflow, outfref=flowref);
16752 +   %em_copyfile(infref=treepub, outfref=pubref);
16754 +   filename treeflow;
16755 +   filename treepub;
16757 +   /* if priors are used, add code to generate unadjusted residuals in export */
16758 +   %let useAdjPriors = N;
16759 +   data _null_;
16760 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16761 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16762 +   run;
16763 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16764 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16765 +      %include temp;
16766 +      filename temp;
16768 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16769 +      filename adjref "&EM_USER_adjResidualCode";
16770 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16772 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16774 +      filename adjref;
16775 +   %end;
16777 +   /* LEAF */
16778 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16779 +      data _null_;
16780 +        file flowref mod;
16781 +        put 'drop _LEAF_;';
16782 +      run;
16784 +      data _null_;
16785 +        file pubref mod;
16786 +        put 'drop _LEAF_;';
16787 +      run;
16789 +   %end;
16791 +   filename flowref;
16792 +   filename pubref;
16794 +   /* em_metachange code */
16795 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16796 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16797 +   %end;
16799 +   /* variable selection based on importance stat    */
16800 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16801 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16802 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16803 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16804 +     %let obs = %sysfunc(fetch(&dsid));
16805 +     %do %while(&obs=0);
16806 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16807 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16808 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16809 +       %let obs = %sysfunc(fetch(&dsid));
16810 +     %end;
16811 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16812 +   %end;
16814 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16815 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16816 +    %let tree_pred_vars = ;
16817 +    %let tree_pred_lvl =;
16818 +    %let numpred= 0;
16820 +    data _null_;
16821 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16822 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16823 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16824 +     if eof then
16825 +       call symput('numpred', strip(put(_N_, BEST.)));
16826 +    run;
16827 +   %end;
16829 +   %if &numpred ne 0 %then %do;
16830 +    %do i=1 %to &numpred;
16831 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16832 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16833 +    %end;
16834 +   %end;
16836 +   /* determine if multiple targets will be processed */
16837 +   %let em_tree_multipleTargets=N;
16838 +   %let em_tree_numTarget=1;
16839 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16840 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16841 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16842 +         %let em_tree_multipleTargets=N;
16843 +      %end;
16844 +      %else %do;
16845 +        data _null_;
16846 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16847 +          if eof then
16848 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16849 +        run;
16851 +        %if &em_tree_numTarget gt 1 %then %do;
16852 +           %let em_tree_multipleTargets=Y;
16853 +        %end;
16854 +     %end;
16855 +   %end;
16857 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16858 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16860 +      /* variable importance */
16861 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16862 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16864 +         %let validexist=0;
16865 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16866 +           %let validexist=1;
16867 +         %end;
16869 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16870 +         /* and the columns may not be generated                                                                                 */
16871 +         %let em_tree_cvexists=;
16872 +         %let em_tree_surrexists=.;
16873 +         data _null_;
16874 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16875 +            if eof then do ;
16876 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16877 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16878 +            end;
16879 +         run;
16881 +         data &EM_USER_OUTIMPORT;
16882 +            set &EM_USER_OUTIMPORT;
16884 +            /* format columns based on Precison value specified */
16885 +            format importance 15.&EM_PROPERTY_PRECISION
16886 +                 %if &validexist %then %do;
16887 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16888 +                 %end;
16889 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16890 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16891 +                 %end;
16892 +            ;
16893 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16894 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16895 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16896 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16897 +                 %if "&em_tree_surrexists" ne "" %then %do;
16898 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16899 +                 %end;
16900 +                 %if &validexist %then %do;
16901 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16902 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16903 +                 %end;
16904 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16905 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16906 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16907 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16908 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16909 +                 %end;
16910 +            ;
16911 +         run;
16913 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16914 +      %end;
16915 +   %end;
16917 +   %doendm:
16918 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12May2019:22:31:59,
      Create Time=12May2019:22:31:59
 
NOTE: 134 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 67.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12May2019:22:31:59,
      Create Time=12May2019:22:31:59
 
NOTE: 107 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TRADE_FLAG_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5254,
      Last Modified=12May2019:22:31:59,
      Create Time=12May2019:22:31:59
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4285,
      Last Modified=12May2019:22:31:59,
      Create Time=12May2019:22:31:59
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.IDS2_TRADE_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
16919
16920  *------------------------------------------------------------*;
16921  * End SCORE: Tree;
16922  *------------------------------------------------------------*;
 
16923  proc sort data=WORK.EM_METACHANGE;
16924  by key uname;
16925  run;
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16926  filename x "C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
16927  data _null_;
16928  file x;
16929  put 'if upcase(NAME) = "CHANGE_FLAG" then do;';
16930  put 'ROLE = "REJECTED";';
16931  put 'end;';
16932  put 'else ';
16933  put 'if upcase(NAME) = "Q_TRADE_FLAGBUY" then do;';
16934  put 'ROLE = "ASSESS";';
16935  put 'end;';
16936  put 'else ';
16937  put 'if upcase(NAME) = "Q_TRADE_FLAGHOLD" then do;';
16938  put 'ROLE = "ASSESS";';
16939  put 'end;';
16940  put 'else ';
16941  put 'if upcase(NAME) = "Q_TRADE_FLAGSELL" then do;';
16942  put 'ROLE = "ASSESS";';
16943  put 'end;';
16944  put 'else ';
16945  put 'if upcase(NAME) = "REP_CLOSE" then do;';
16946  put 'ROLE = "REJECTED";';
16947  put 'end;';
16948  put 'else ';
16949  put 'if upcase(NAME) = "REP_HIGH" then do;';
16950  put 'ROLE = "REJECTED";';
16951  put 'end;';
16952  put 'else ';
16953  put 'if upcase(NAME) = "REP_LOW" then do;';
16954  put 'ROLE = "REJECTED";';
16955  put 'end;';
16956  put 'else ';
16957  put 'if upcase(NAME) = "_NODE_" then do;';
16958  put 'ROLE = "SEGMENT";';
16959  put 'LEVEL = "NOMINAL";';
16960  put 'end;';
16961  run;
 
NOTE: The file X is:
      Filename=C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12May2019:22:31:59,
      Create Time=09May2019:12:37:09
 
NOTE: 32 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 45.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16962  filename x;
NOTE: Fileref X has been deassigned.
 
16963  filename emflow "C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
16964  *------------------------------------------------------------*;
16965  * Tree: Scoring DATA data;
16966  *------------------------------------------------------------*;
16967  data EMWS1.Tree_TRAIN
16968  / view=EMWS1.Tree_TRAIN
16969  ;
16970  set EMWS1.Part_TRAIN
16971  ;
16972  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
16973 +****************************************************************;
16974 +******             DECISION TREE SCORING CODE             ******;
16975 +****************************************************************;
16976 +
16977 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16978 +LENGTH F_trade_flag  $    4;
16979 +LENGTH I_trade_flag  $    4;
16980 +LENGTH U_trade_flag  $    4;
16981 +LENGTH _WARN_  $    4;
16982 +
16983 +******              LABELS FOR NEW VARIABLES              ******;
16984 +label _NODE_ = 'Node' ;
16985 +label _LEAF_ = 'Leaf' ;
16986 +label P_trade_flagsell = 'Predicted: trade_flag=sell' ;
16987 +label P_trade_flaghold = 'Predicted: trade_flag=hold' ;
16988 +label P_trade_flagbuy = 'Predicted: trade_flag=buy' ;
16989 +label Q_trade_flagsell = 'Unadjusted P: trade_flag=sell' ;
16990 +label Q_trade_flaghold = 'Unadjusted P: trade_flag=hold' ;
16991 +label Q_trade_flagbuy = 'Unadjusted P: trade_flag=buy' ;
16992 +label V_trade_flagsell = 'Validated: trade_flag=sell' ;
16993 +label V_trade_flaghold = 'Validated: trade_flag=hold' ;
16994 +label V_trade_flagbuy = 'Validated: trade_flag=buy' ;
16995 +label R_trade_flagsell = 'Residual: trade_flag=sell' ;
16996 +label R_trade_flaghold = 'Residual: trade_flag=hold' ;
16997 +label R_trade_flagbuy = 'Residual: trade_flag=buy' ;
16998 +label F_trade_flag = 'From: trade_flag' ;
16999 +label I_trade_flag = 'Into: trade_flag' ;
17000 +label U_trade_flag = 'Unnormalized Into: trade_flag' ;
17001 +label _WARN_ = 'Warnings' ;
17002 +
17003 +
17004 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17005 +LENGTH _ARBFMT_4 $      4; DROP _ARBFMT_4;
17006 +_ARBFMT_4 = ' '; /* Initialize to avoid warning. */
17007 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17008 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17009 +
17010 +
17011 +_ARBFMT_4 = PUT( trade_flag , $4.);
17012 + %DMNORMCP( _ARBFMT_4, F_trade_flag );
17013 +
17014 +******             ASSIGN OBSERVATION TO NODE             ******;
17015 +IF  NOT MISSING(vol ) AND
17016 +  vol  <                  0.5 THEN DO;
17017 +  _NODE_  =                    2;
17018 +  _LEAF_  =                    1;
17019 +  P_trade_flagsell  =                    0;
17020 +  P_trade_flaghold  =                    0;
17021 +  P_trade_flagbuy  =                    1;
17022 +  Q_trade_flagsell  =                    0;
17023 +  Q_trade_flaghold  =                    0;
17024 +  Q_trade_flagbuy  =                    1;
17025 +  V_trade_flagsell  =                    0;
17026 +  V_trade_flaghold  =                    0;
17027 +  V_trade_flagbuy  =                    1;
17028 +  I_trade_flag  = 'BUY' ;
17029 +  U_trade_flag  = 'buy' ;
17030 +  END;
17031 +ELSE DO;
17032 +  _ARBFMT_12 = PUT( stock_code , BEST12.);
17033 +   %DMNORMIP( _ARBFMT_12);
17034 +  IF _ARBFMT_12 IN ('7216' ,'8125' ,'2984' ) THEN DO;
17035 +    _NODE_  =                    5;
17036 +    _LEAF_  =                    4;
17037 +    P_trade_flagsell  =                    1;
17038 +    P_trade_flaghold  =                    0;
17039 +    P_trade_flagbuy  =                    0;
17040 +    Q_trade_flagsell  =                    1;
17041 +    Q_trade_flaghold  =                    0;
17042 +    Q_trade_flagbuy  =                    0;
17043 +    V_trade_flagsell  =                    1;
17044 +    V_trade_flaghold  =                    0;
17045 +    V_trade_flagbuy  =                    0;
17046 +    I_trade_flag  = 'SELL' ;
17047 +    U_trade_flag  = 'sell' ;
17048 +    END;
17049 +  ELSE DO;
17050 +    IF  NOT MISSING(REP_open ) AND
17051 +                     5.095 <= REP_open  THEN DO;
17052 +      _NODE_  =                    7;
17053 +      _LEAF_  =                    3;
17054 +      P_trade_flagsell  =                    1;
17055 +      P_trade_flaghold  =                    0;
17056 +      P_trade_flagbuy  =                    0;
17057 +      Q_trade_flagsell  =                    1;
17058 +      Q_trade_flaghold  =                    0;
17059 +      Q_trade_flagbuy  =                    0;
17060 +      V_trade_flagsell  =                    1;
17061 +      V_trade_flaghold  =                    0;
17062 +      V_trade_flagbuy  =                    0;
17063 +      I_trade_flag  = 'SELL' ;
17064 +      U_trade_flag  = 'sell' ;
17065 +      END;
17066 +    ELSE DO;
17067 +      _NODE_  =                    6;
17068 +      _LEAF_  =                    2;
17069 +      P_trade_flagsell  =     0.23728813559322;
17070 +      P_trade_flaghold  =     0.72881355932203;
17071 +      P_trade_flagbuy  =     0.03389830508474;
17072 +      Q_trade_flagsell  =     0.23728813559322;
17073 +      Q_trade_flaghold  =     0.72881355932203;
17074 +      Q_trade_flagbuy  =     0.03389830508474;
17075 +      V_trade_flagsell  =     0.25925925925925;
17076 +      V_trade_flaghold  =     0.74074074074074;
17077 +      V_trade_flagbuy  =                    0;
17078 +      I_trade_flag  = 'HOLD' ;
17079 +      U_trade_flag  = 'hold' ;
17080 +      END;
17081 +    END;
17082 +  END;
17083 +
17084 +*****  RESIDUALS R_ *************;
17085 +IF  F_trade_flag  NE 'SELL'
17086 +AND F_trade_flag  NE 'HOLD'
17087 +AND F_trade_flag  NE 'BUY'  THEN DO;
17088 +        R_trade_flagsell  = .;
17089 +        R_trade_flaghold  = .;
17090 +        R_trade_flagbuy  = .;
17091 + END;
17092 + ELSE DO;
17093 +       R_trade_flagsell  =  -P_trade_flagsell ;
17094 +       R_trade_flaghold  =  -P_trade_flaghold ;
17095 +       R_trade_flagbuy  =  -P_trade_flagbuy ;
17096 +       SELECT( F_trade_flag  );
17097 +          WHEN( 'SELL'  ) R_trade_flagsell  = R_trade_flagsell  +1;
17098 +          WHEN( 'HOLD'  ) R_trade_flaghold  = R_trade_flaghold  +1;
17099 +          WHEN( 'BUY'  ) R_trade_flagbuy  = R_trade_flagbuy  +1;
17100 +       END;
17101 + END;
17102 +
17103 +****************************************************************;
17104 +******          END OF DECISION TREE SCORING CODE         ******;
17105 +****************************************************************;
17106 +
17107 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17108  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17109  quit;
17110  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17111  filename emflow "C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17112  *------------------------------------------------------------*;
17113  * Tree: Scoring VALIDATE data;
17114  *------------------------------------------------------------*;
17115  data EMWS1.Tree_VALIDATE
17116  / view=EMWS1.Tree_VALIDATE
17117  ;
17118  set EMWS1.Part_VALIDATE
17119  ;
17120  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\dante\Documents\My SAS Files\9.4\stock3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17121 +****************************************************************;
17122 +******             DECISION TREE SCORING CODE             ******;
17123 +****************************************************************;
17124 +
17125 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17126 +LENGTH F_trade_flag  $    4;
17127 +LENGTH I_trade_flag  $    4;
17128 +LENGTH U_trade_flag  $    4;
17129 +LENGTH _WARN_  $    4;
17130 +
17131 +******              LABELS FOR NEW VARIABLES              ******;
17132 +label _NODE_ = 'Node' ;
17133 +label _LEAF_ = 'Leaf' ;
17134 +label P_trade_flagsell = 'Predicted: trade_flag=sell' ;
17135 +label P_trade_flaghold = 'Predicted: trade_flag=hold' ;
17136 +label P_trade_flagbuy = 'Predicted: trade_flag=buy' ;
17137 +label Q_trade_flagsell = 'Unadjusted P: trade_flag=sell' ;
17138 +label Q_trade_flaghold = 'Unadjusted P: trade_flag=hold' ;
17139 +label Q_trade_flagbuy = 'Unadjusted P: trade_flag=buy' ;
17140 +label V_trade_flagsell = 'Validated: trade_flag=sell' ;
17141 +label V_trade_flaghold = 'Validated: trade_flag=hold' ;
17142 +label V_trade_flagbuy = 'Validated: trade_flag=buy' ;
17143 +label R_trade_flagsell = 'Residual: trade_flag=sell' ;
17144 +label R_trade_flaghold = 'Residual: trade_flag=hold' ;
17145 +label R_trade_flagbuy = 'Residual: trade_flag=buy' ;
17146 +label F_trade_flag = 'From: trade_flag' ;
17147 +label I_trade_flag = 'Into: trade_flag' ;
17148 +label U_trade_flag = 'Unnormalized Into: trade_flag' ;
17149 +label _WARN_ = 'Warnings' ;
17150 +
17151 +
17152 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17153 +LENGTH _ARBFMT_4 $      4; DROP _ARBFMT_4;
17154 +_ARBFMT_4 = ' '; /* Initialize to avoid warning. */
17155 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17156 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17157 +
17158 +
17159 +_ARBFMT_4 = PUT( trade_flag , $4.);
17160 + %DMNORMCP( _ARBFMT_4, F_trade_flag );
17161 +
17162 +******             ASSIGN OBSERVATION TO NODE             ******;
17163 +IF  NOT MISSING(vol ) AND
17164 +  vol  <                  0.5 THEN DO;
17165 +  _NODE_  =                    2;
17166 +  _LEAF_  =                    1;
17167 +  P_trade_flagsell  =                    0;
17168 +  P_trade_flaghold  =                    0;
17169 +  P_trade_flagbuy  =                    1;
17170 +  Q_trade_flagsell  =                    0;
17171 +  Q_trade_flaghold  =                    0;
17172 +  Q_trade_flagbuy  =                    1;
17173 +  V_trade_flagsell  =                    0;
17174 +  V_trade_flaghold  =                    0;
17175 +  V_trade_flagbuy  =                    1;
17176 +  I_trade_flag  = 'BUY' ;
17177 +  U_trade_flag  = 'buy' ;
17178 +  END;
17179 +ELSE DO;
17180 +  _ARBFMT_12 = PUT( stock_code , BEST12.);
17181 +   %DMNORMIP( _ARBFMT_12);
17182 +  IF _ARBFMT_12 IN ('7216' ,'8125' ,'2984' ) THEN DO;
17183 +    _NODE_  =                    5;
17184 +    _LEAF_  =                    4;
17185 +    P_trade_flagsell  =                    1;
17186 +    P_trade_flaghold  =                    0;
17187 +    P_trade_flagbuy  =                    0;
17188 +    Q_trade_flagsell  =                    1;
17189 +    Q_trade_flaghold  =                    0;
17190 +    Q_trade_flagbuy  =                    0;
17191 +    V_trade_flagsell  =                    1;
17192 +    V_trade_flaghold  =                    0;
17193 +    V_trade_flagbuy  =                    0;
17194 +    I_trade_flag  = 'SELL' ;
17195 +    U_trade_flag  = 'sell' ;
17196 +    END;
17197 +  ELSE DO;
17198 +    IF  NOT MISSING(REP_open ) AND
17199 +                     5.095 <= REP_open  THEN DO;
17200 +      _NODE_  =                    7;
17201 +      _LEAF_  =                    3;
17202 +      P_trade_flagsell  =                    1;
17203 +      P_trade_flaghold  =                    0;
17204 +      P_trade_flagbuy  =                    0;
17205 +      Q_trade_flagsell  =                    1;
17206 +      Q_trade_flaghold  =                    0;
17207 +      Q_trade_flagbuy  =                    0;
17208 +      V_trade_flagsell  =                    1;
17209 +      V_trade_flaghold  =                    0;
17210 +      V_trade_flagbuy  =                    0;
17211 +      I_trade_flag  = 'SELL' ;
17212 +      U_trade_flag  = 'sell' ;
17213 +      END;
17214 +    ELSE DO;
17215 +      _NODE_  =                    6;
17216 +      _LEAF_  =                    2;
17217 +      P_trade_flagsell  =     0.23728813559322;
17218 +      P_trade_flaghold  =     0.72881355932203;
17219 +      P_trade_flagbuy  =     0.03389830508474;
17220 +      Q_trade_flagsell  =     0.23728813559322;
17221 +      Q_trade_flaghold  =     0.72881355932203;
17222 +      Q_trade_flagbuy  =     0.03389830508474;
17223 +      V_trade_flagsell  =     0.25925925925925;
17224 +      V_trade_flaghold  =     0.74074074074074;
17225 +      V_trade_flagbuy  =                    0;
17226 +      I_trade_flag  = 'HOLD' ;
17227 +      U_trade_flag  = 'hold' ;
17228 +      END;
17229 +    END;
17230 +  END;
17231 +
17232 +*****  RESIDUALS R_ *************;
17233 +IF  F_trade_flag  NE 'SELL'
17234 +AND F_trade_flag  NE 'HOLD'
17235 +AND F_trade_flag  NE 'BUY'  THEN DO;
17236 +        R_trade_flagsell  = .;
17237 +        R_trade_flaghold  = .;
17238 +        R_trade_flagbuy  = .;
17239 + END;
17240 + ELSE DO;
17241 +       R_trade_flagsell  =  -P_trade_flagsell ;
17242 +       R_trade_flaghold  =  -P_trade_flaghold ;
17243 +       R_trade_flagbuy  =  -P_trade_flagbuy ;
17244 +       SELECT( F_trade_flag  );
17245 +          WHEN( 'SELL'  ) R_trade_flagsell  = R_trade_flagsell  +1;
17246 +          WHEN( 'HOLD'  ) R_trade_flaghold  = R_trade_flaghold  +1;
17247 +          WHEN( 'BUY'  ) R_trade_flagbuy  = R_trade_flagbuy  +1;
17248 +       END;
17249 + END;
17250 +
17251 +****************************************************************;
17252 +******          END OF DECISION TREE SCORING CODE         ******;
17253 +****************************************************************;
17254 +
17255 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17256  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17257  quit;
17258  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
17260  proc sort data=WORK.EM_USER_REPORT;
17261  by ID VIEW;
17262  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17263  *------------------------------------------------------------*;
17264  * Tree: Computing metadata for TRAIN data;
17265  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
17646  data WORK.MODELTEMP_INFO;
17647  set EMWS1.Tree_EMINFO;
17648  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17649  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17650  data EMWS1.Tree_EMINFO;
17651  length TARGET KEY $32 DATA $43;
17652  input TARGET KEY DATA $;
17653  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17657  run;
17658  data EMWS1.Tree_EMINFO;
17659  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
17660  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17661  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
17662  by TARGET KEY;
17663  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17664  proc sort data = EMWS1.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
17665  by TARGET KEY;
17666  run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17667  proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
17668  by TARGET KEY;
17669  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17670  data EMWS1.Tree_EMINFO;
17671  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
17672  by TARGET KEY;
17673  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17674  proc datasets lib=work nolist;
17675  delete TEMP_INFO SORTEDEMINFO;
17676  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
17677  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 12, 2019
Time:                22:32:00
*------------------------------------------------------------*
17701  data EMWS1.Tree_EMOUTFIT;
17702  set EMWS1.Tree_EMOUTFIT;
17703  length TargetLabel $200;
17704  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17705  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17706  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
17707  by TARGET;
17708  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17709  %let _EMwarndup = 0;
17710  %let _EMtargetdup =;
17711  %let _EMASEtargetdup =;
17712  data _null_;
17713  set EMWS1.Tree_EMOUTFIT;
17714  if .<_ASE_<0.000001 then do;
17715  call symput('_EMwarndup', '1');
17716  call symput('_EMtargetdup', target);
17717  call symput('_EMASEtargetdup', put(_ASE_, best.));
17718  end;
17719  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17720  %let EMEXCEPTIONSTRING=;
17721  *------------------------------------------------------------*;
17722  * REPORT: Tree;
17723  *------------------------------------------------------------*;
17724  %let EM_ACTION = REPORT;
17725  %let syscc = 0;
17726  %macro main;
17727
17728    %if %upcase(&EM_ACTION) = CREATE %then %do;
17729      filename temp catalog 'sashelp.emmodl.tree_create.source';
17730      %include temp;
17731      filename temp;
17732
17733      %em_tree_create;
17734    %end;
17735
17736     %else
17737     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17738
17739         filename temp catalog 'sashelp.emmodl.tree_train.source';
17740         %include temp;
17741         filename temp;
17742         %em_tree_train;
17743     %end;
17744
17745    %else
17746    %if %upcase(&EM_ACTION) = SCORE %then %do;
17747      filename temp catalog 'sashelp.emmodl.tree_score.source';
17748      %include temp;
17749      filename temp;
17750
17751      %em_tree_score;
17752
17753    %end;
17754
17755    %else
17756    %if %upcase(&EM_ACTION) = REPORT %then %do;
17757
17758         filename temp catalog 'sashelp.emmodl.tree_report.source';
17759         %include temp;
17760         filename temp;
17761
17762         %em_tree_report;
17763     %end;
17764
17765    %else
17766    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17767
17768         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17769         %include temp;
17770         filename temp;
17771         %EM_TREE_OPENTREEVIEWER;
17772
17773     %end;
17774
17775    %else
17776    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17777
17778         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17779         %include temp;
17780         filename temp;
17781         %EM_TREE_CLOSETREEVIEWER;
17782
17783     %end;
17784
17785
17786     %doendm:
17787  %mend main;
17788
17789  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
17791 +%macro em_tree_makePlotDs( multipleTar= );
17793 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
17794 +  %EM_GETNAME(key=OUTNODES, type=DATA);
17795 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
17796 +  %EM_GETNAME(key=OUTRULES, type=DATA);
17798 +  /* determine if validation statistics will be displayed */
17799 +  %let validflag=N;
17800 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
17801 +    /* determine if validation data exists */
17802 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
17803 +      %let validflag=Y;
17804 +    %end;
17805 +  %end;
17807 +   /* retrieve name of decmeta even in presence of multiple targets */
17808 +   %let decmeta = ;
17809 +   %if &EM_DEC_DECMETA eq %then %do;
17810 +     data _Target;
17811 +       set &em_data_variableset;
17812 +       where ROLE='TARGET' and USE in('D', 'Y');
17813 +       keep NAME;
17814 +     run;
17815 +     proc sort data=_Target;
17816 +       by NAME;
17817 +     run;
17818 +     proc sort data=EM_TARGETDECINFO;
17819 +       by TARGET;
17820 +     run;
17821 +     data _Target;
17822 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
17823 +       by NAME;
17824 +       if _a then do;
17825 +         call symput('decmeta', trim(DECMETA));
17826 +       end;
17827 +     run;
17828 +     proc delete data=_Target;run;
17829 +   %end;
17830 +   %else %let decmeta = &EM_DEC_DECMETA;
17833 +  /* retrieve targetEvent from decmeta */
17834 +  %let targetEvent=;
17835 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17836 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17837 +      data _null_;
17838 +       set &DECMETA(where=(_TYPE_="TARGET"));
17839 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
17840 +      run;
17841 +    %end;
17842 +  %end;
17844 +  /* retrieve predicted var for targetEvent from decmeta */
17845 +  %let predTarget=;
17846 +  %let predLvl=;
17847 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17848 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17849 +      data _null_;
17850 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
17851 +       call symput('predTarget', strip(VARIABLE));
17852 +       call symput('predLvl', strip(LEVEL));
17853 +      run;
17854 +    %end;
17855 +  %end;
17856 +  %else %do;
17857 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17858 +      data _null_;
17859 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
17860 +       call symput('predTarget', strip(VARIABLE));
17861 +      run;
17862 +    %end;
17863 +  %end;
17865 +  /* create BelowText value */
17866 +  data belowtext;
17867 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
17868 +    keep node belowtext;
17869 +  run;
17871 +  /* relace belowtext with variable label if it exists */
17872 +  data belowtext2;
17873 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
17874 +    keep node belowtextlbl;
17875 +  run;
17877 +  proc sort data=belowtext; by node; run;
17878 +  proc sort data=belowtext2; by node; run;
17880 +  data belowtext;
17881 +    merge belowtext belowtext2(in=_a);
17882 +    by node;
17883 +    if _a then belowtext=belowtextlbl;
17884 +    keep node belowtext;
17885 +  run;
17887 +  /* create AboveText value */
17888 +  data abovetext;
17889 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
17890 +  run;
17891 +  proc sort data=abovetext; by node numeric_value; run;
17893 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
17894 +  data abovetext;
17895 +    set abovetext(rename=(node=parent));
17896 +    by parent numeric_value;
17897 +    retain abovetext tempstring flag branch origval origchar ;
17898 +    length abovetext $256;
17899 +    length tempstring origchar $64;
17901 +    if STAT in ("INTERVAL", "ORDINAL") then do;
17902 +      if first.parent then do;
17903 +        if missing(character_value) then do;
17904 +          numeric_value = round(numeric_value, &sp_precision);
17905 +          abovetext = "< "||strip(NUMERIC_VALUE);
17906 +          branch = 1;
17907 +          origval = numeric_value;
17908 +          output;
17909 +        end;
17910 +        else do;
17911 +          abovetext = "< "||strip(CHARACTER_VALUE);
17912 +          branch = 1;
17913 +          origchar = character_value;
17914 +          output;
17915 +        end;
17917 +        if first.parent AND last.parent then do;
17918 +          if missing(character_value) then do;
17919 +            numeric_value = round(numeric_value, &sp_precision);
17920 +            branch = branch + 1;
17921 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17922 +            output;
17923 +          end;
17924 +          else do;
17925 +            branch = branch + 1;
17926 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17927 +            output;
17928 +          end;
17929 +        end;
17930 +      end;
17931 +      else if last.parent then do;
17932 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17933 +          if missing(character_value) then do;
17934 +            numeric_value = round(numeric_value, &sp_precision);
17935 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17936 +          end;
17937 +          else do;
17938 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17939 +          end;
17940 +          branch = branch + 1;
17941 +          output;
17943 +          if missing(character_value) then do;
17944 +            numeric_value = round(numeric_value, &sp_precision);
17945 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17946 +          end;
17947 +          else do;
17948 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17949 +          end;
17950 +          branch = branch + 1;
17951 +          output;
17952 +        end;
17953 +        else do;
17954 +          if missing(character_value) then do;
17955 +            numeric_value = round(numeric_value, &sp_precision);
17956 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17957 +          end;
17958 +          else do;
17959 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17960 +          end;
17961 +          branch = branch + 1;
17962 +          output;
17963 +        end;
17964 +      end;
17965 +      else do;
17966 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17967 +          if missing(character_value) then do;
17968 +            numeric_value = round(numeric_value,&sp_precision);
17969 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17970 +            origval = numeric_value;
17971 +          end;
17972 +          else do;
17973 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17974 +            origchar = character_value;
17975 +          end;
17976 +          branch = branch + 1;
17977 +          output;
17979 +        end;
17980 +        else do;
17981 +          if missing(character_value) then do;
17982 +            numeric_value = round(numeric_value, &sp_precision);
17983 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17984 +            origval = numeric_value;
17985 +          end;
17986 +          else do;
17987 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17988 +            origval = character_value;
17989 +          end;
17990 +          branch = branch + 1;
17991 +          output;
17992 +        end;
17993 +      end;
17994 +    end;
17995 +    else do;
17996 +       if first.numeric_value then do;
17997 +         flag = 0;
17998 +         abovetext = strip(CHARACTER_VALUE);
17999 +         branch = numeric_value;
18000 +         if first.numeric_value AND last.numeric_value then do;
18001 +           output;
18002 +         end;
18003 +       end;
18004 +       else if last.numeric_value then do;
18005 +         if flag=0 then do;
18006 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18007 +           length = length(strip(tempstring));
18008 +           if length < 32 then do;
18009 +             abovetext = strip(tempstring);
18010 +           end;
18011 +           else do;
18012 +             abovetext = strip(abovetext)||", ...";
18013 +             flag = 1;
18014 +           end;
18015 +         end;
18016 +         branch = numeric_value;
18017 +         output;
18018 +       end;
18019 +       else do;
18020 +         if flag=0 then do;
18021 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18022 +           length = length(strip(tempstring));
18023 +           if length < 32 then do;
18024 +             abovetext = strip(tempstring);
18025 +           end;
18026 +           else do;
18027 +             abovetext = strip(abovetext)||", ...";
18028 +             flag=1;
18029 +           end;
18030 +         end;
18031 +         branch = numeric_value;
18032 +       end;
18033 +    end;
18034 +    keep parent branch abovetext;
18035 +  run;
18037 +  /* MIssing value to abovetext */
18038 +  data tempmissing;
18039 +    set &EM_USER_OUTRULES;
18040 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18041 +    rename node=parent numeric_value=branch character_value=misschar;
18042 +  run;
18045 +  proc sort data=abovetext; by parent branch; run;
18046 +  proc sort data=tempmissing; by parent branch; run;
18047 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18049 +  data tempoutnodes;
18050 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18051 +    by parent branch;
18052 +    length traintotal validtotal 8;
18053 +    retain traintotal validtotal;
18055 +    if _a then do;
18056 +      if ^MISSING(abovetext) then do;
18057 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18058 +      end;
18059 +      else do;
18060 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18061 +      end;
18062 +    end;
18063 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18065 +    if node=1 then do;
18066 +      traintotal = N;
18067 +      validtotal=VN;
18068 +    end;
18070 +    drop role rank stat misschar belowtext;
18071 +  run;
18072 +  proc sort data=tempoutnodes; by node; run;
18073 +  proc sort data=belowtext; by node; run;
18075 +  data tempoutnodes;
18076 +    merge tempoutnodes belowtext;
18077 +    by node;
18079 +  run;
18081 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18082 +  %let adjusted = N;
18083 +  %let npriors = 0;
18084 +  data _null_ ;
18085 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18086 +    if eof then do ;
18087 +      call symput("npriors" , strip(put(_N_,best.))) ;
18088 +    end;
18089 +  run;
18090 +  %if &npriors gt 0 %then %let adjusted=Y;
18093 +  /* create a table with targetUsed and targetLevel columns for each node */
18094 +  data temptarmeta;
18095 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18096 +    %if &multipleTar eq N %then %do;
18097 +      AND USE in ('D', 'Y')
18098 +    %end;
18099 +    ));
18100 +    length TARGET $32;
18101 +    Target=name;
18102 +    keep target level;
18103 +  run;
18105 +  %if &multipleTar eq Y %then %do;
18106 +    data temptargetused;
18107 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18108 +      keep node target;
18109 +    run;
18110 +    proc sort data=temptargetused; by target; run;
18111 +    proc sort data=temptarmeta; by target; run;
18112 +    data temptargetused;
18113 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18114 +      by target;
18115 +      if _a and _b;
18116 +    run;
18117 +  %end;
18118 +  %else %do;
18119 +    data temptargetused;
18120 +      set &EM_USER_OUTSTATS;
18121 +      length target $32 tarlevel $10;
18122 +      target="%EM_TARGET";
18123 +      tarlevel="%EM_TARGET_LEVEL";
18124 +      keep node target tarlevel;
18125 +    run;
18126 +    proc sort data=temptargetused nodupkey; by node; run;
18127 +  %end;
18129 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18130 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18131 +  proc sort data=temptargetused; by node; run;
18134 +  /* create tables for all interval targets as well as all class targets */
18135 +  data tempinterval tempclass;
18136 +    merge tempoutstats temptargetused( rename=(target=targetused));
18137 +    by node;
18138 +    %if "&multipleTar" eq "Y" %then %do;
18139 +      if ((missing(Target)) OR (target=targetused ));
18140 +    %end;
18142 +    if tarlevel="INTERVAL" then output tempinterval;
18143 +    else output tempclass;
18144 +  run;
18146 +  /* iniitalize intTarget and classTarget flags */
18147 +  %let em_intNobs =0;
18148 +  %let em_classNobs = 0;
18149 +  %let em_intTarget= N;
18150 +  %let em_classTarget= N;
18152 +  proc sql;
18153 +    reset noprint;
18154 +    select count(*) into :em_intNobs from tempinterval;
18155 +  quit;
18156 +  proc sql;
18157 +    reset noprint;
18158 +    select count(*) into :em_classNobs from tempclass;
18159 +  quit;
18161 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18162 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18164 +  /* retrieve all information for interval targets */
18165 +  %if &em_intTarget eq Y %then %do;
18167 +    /* determine if leaf variable exists */
18168 +    %let dsid=%sysfunc(open(tempinterval,i));
18169 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18170 +    %let rc=%sysfunc(close(&dsid));
18172 +    proc transpose data=tempinterval
18173 +      %if &leafexists %then %do;
18174 +        (drop=leaf)
18175 +      %end;
18176 +      %if &validexist %then %do;
18177 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18178 +      %end;
18179 +      %else %do;
18180 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18181 +      %end;
18182 +      by node;
18183 +      id statname;
18184 +    run;
18185 +    data tempinterval;
18186 +      set tempinterval;
18187 +      if missing(N) then delete;
18188 +    run;
18189 +  %end;
18191 +  /* retrieve all information for class targets */
18192 +  %if &em_classTarget eq Y %then %do;
18193 +    proc sort data=tempclass; by node category; run;
18194 +    %if &validflag eq N %then %do;
18195 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18196 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18197 +    %end;
18198 +    %else %do;
18199 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18200 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18201 +    %end;
18202 +      set tempclass;
18204 +      %if &validflag eq N %then %do;
18205 +        %if "&adjusted" eq "N" %then %do;
18206 +          if statname="N" then output tempn;
18207 +        %end;
18208 +        %else %do;
18209 +          if statname="NPRIORS" then output tempn;
18210 +        %end;
18211 +        else if statname="PREDICTION" then output temppredict;
18212 +        else if statname="PROBABILITY" then output tempprob;
18213 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18214 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18215 +      %end;
18216 +      %else %do;
18217 +        %if "&adjusted" eq "N" %then %do;
18218 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18219 +        %end;
18220 +        %else %do;
18221 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18222 +        %end;
18223 +        else if statname="PREDICTION" then output temppredict;
18224 +        else if statname="PROBABILITY" then output tempprob;
18225 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18226 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18227 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18228 +      %end;
18229 +    run;
18232 +    /* determine if profit/loss exists in tempprofit */
18233 +    %let em_profitflag=0;
18234 +    %let em_lossflag=0;
18235 +    proc sql;
18236 +      reset noprint;
18237 +      select count(*) into :em_profitflag from tempprofit;
18238 +    quit;
18239 +    proc sql;
18240 +      reset noprint;
18241 +      select count(*) into :em_lossflag from temploss;
18242 +    quit;
18244 +    %if &validFlag eq Y %then %do;
18245 +      proc transpose data=tempn
18246 +        %if "&adjusted" eq "N" %then %do;
18247 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18248 +        %end;
18249 +        %else %do;
18250 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18251 +        %end;
18252 +        by node;
18253 +        id statname;
18254 +      run;
18255 +      %if &em_profitflag ne 0 %then %do;
18256 +        proc transpose data=tempprofit out=tempprofit;
18257 +          by node category;
18258 +          id statname ;
18259 +        run;
18260 +      %end;
18261 +      %if &em_lossflag ne 0 %then %do;
18262 +        proc transpose data=temploss out=temploss;
18263 +          by node category;
18264 +          id statname ;
18265 +        run;
18266 +      %end;
18267 +      data tempprob;
18268 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18269 +        by node
18270 +        %if &multipleTar eq Y %then %do;
18271 +          target
18272 +        %end;
18273 +        category;
18274 +      run;
18275 +    %end;
18277 +    /* store percentcorrect value */
18278 +    data temppredict;
18279 +      merge tempprob temppredict(in=_a);
18280 +      by node category;
18281 +      if _a then do;
18282 +        percentCorrect = statvalue;
18283 +        %if &validFlag eq Y %then %do;
18284 +          vpercentCorrect= vstatvalue;
18285 +        %end;
18286 +      end;
18287 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18288 +      %if &validFlag eq Y %then %do;
18289 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18290 +      %end;
18291 +      ;
18292 +      if missing(percentCorrect) then delete;
18293 +      drop target;
18294 +    run;
18296 +    /* build profittext */
18297 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18298 +      data tempprofittext(keep= node profittext profitloss);
18299 +        length profittext $800 profitloss 8.;
18300 +        retain profittext profitloss;
18302 +        merge tempprob
18303 +        %if &em_profitflag ne 0 %then %do;
18304 +          tempprofit
18305 +        %end;
18306 +        %else %if &em_lossflag ne 0 %then %do;
18307 +          temploss
18308 +        %end;
18309 +        ;
18310 +        by node category;
18312 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18313 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18314 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18315 +          %let profittype = ALL;
18316 +        %end;
18318 +        /* create the profitloss variable for nodecolor if selected */
18319 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18321 +        %if "&profittype" eq "ALL" %then %do;
18322 +          if strip(CATEGORY)="&targetEvent" then do;
18323 +            profitloss=statvalue;
18324 +          end;
18325 +          if first.node then do;
18326 +            %if &validFlag eq N %then %do;
18327 +             %if &em_profitflag ne 0 %then %do;
18328 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18329 +             %end;
18330 +             %if &em_lossflag ne 0 %then %do;
18331 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18332 +             %end;
18333 +            %end;
18334 +            %else %do;
18335 +             %if &em_profitflag ne 0 %then %do;
18336 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18336!+;
18337 +             %end;
18338 +             %if &em_lossflag ne 0 %then %do;
18339 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18340 +             %end;
18341 +            %end;
18342 +          end;
18343 +          else if last.node then do;
18344 +            %if &validFlag eq N %then %do;
18345 +             %if &em_profitflag ne 0 %then %do;
18346 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18347 +             %end;
18348 +             %if &em_lossflag ne 0 %then %do;
18349 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18350 +             %end;
18351 +             /*if CATEGORY="&targetEvent" then do;
18352 +               profitloss=statvalue;
18353 +             end;*/
18354 +            %end;
18355 +            %else %do;
18356 +             %if &em_profitflag ne 0 %then %do;
18357 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18357!+14.&EM_PROPERTY_SPLITPRECISION);
18358 +                if CATEGORY="&targetEvent" then do;
18359 +                 profitloss=ALTERNATIVE_PROFIT;
18360 +                end;
18361 +             %end;
18362 +             %if &em_lossflag ne 0 %then %do;
18363 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18363!+14.&EM_PROPERTY_SPLITPRECISION);
18364 +                if CATEGORY="&targetEvent" then do;
18365 +                  profitloss=ALTERNATIVE_LOSS;
18366 +                end;
18367 +             %end;
18368 +            %end;
18369 +            output;
18370 +          end;
18371 +          else do;
18372 +            %if &validFlag eq N %then %do;
18373 +             %if &em_profitflag ne 0 %then %do;
18374 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18375 +             %end;
18376 +             %if &em_lossflag ne 0 %then %do;
18377 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18378 +             %end;
18379 +            %end;
18380 +            %else %do;
18381 +             %if &em_profitflag ne 0 %then %do;
18382 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18382!+14.&EM_PROPERTY_SPLITPRECISION);
18383 +             %end;
18384 +             %if &em_lossflag ne 0 %then %do;
18385 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18385!+14.&EM_PROPERTY_SPLITPRECISION);
18386 +             %end;
18387 +            %end;
18388 +          end;
18389 +        %end;
18390 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18391 +          if strip(CATEGORY) = "&targetevent" then do;
18392 +            %if &validFlag eq N %then %do;
18393 +             %if &em_profitflag ne 0 %then %do;
18394 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18395 +             %end;
18396 +             %if &em_lossflag ne 0 %then %do;
18397 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18398 +             %end;
18399 +             profitloss=statvalue;
18400 +            %end;
18401 +            %else %do;
18402 +             %if &em_profitflag ne 0 %then %do;
18403 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18403!+;
18404 +                profitloss=ALTERNATIVE_PROFIT;
18405 +             %end;
18406 +             %if &em_lossflag ne 0 %then %do;
18407 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18408 +                profitloss=ALTERNATIVE_LOSS;
18409 +             %end;
18410 +            %end;
18411 +            output;
18412 +          end;
18413 +        %end;
18414 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18415 +          if strip(CATEGORY) = "&targetevent" then do;
18416 +            %if &validFlag eq N %then %do;
18417 +             profitloss=statvalue;
18418 +            %end;
18419 +            %else %do;
18420 +             %if &em_profitflag ne 0 %then %do;
18421 +                profitloss=ALTERNATIVE_PROFIT;
18422 +             %end;
18423 +             %if &em_lossflag ne 0 %then %do;
18424 +                profitloss=ALTERNATIVE_LOSS;
18425 +             %end;
18426 +            %end;
18427 +            output;
18428 +          end;
18429 +        %end;
18430 +      run;
18431 +    %end;
18433 +    data tempprob(keep= node probtext);
18434 +      length probtext $800;
18435 +      retain probtext;
18436 +      set tempprob ;
18437 +      by node;
18439 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18440 +      %let probtype = &EM_PROPERTY_TARGET;
18441 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18442 +        %let probtype = ALL;
18443 +      %end;
18445 +      %if "&probtype" eq "ALL" %then %do;
18446 +        if first.node then do;
18447 +          %if &validFlag eq N %then %do;
18448 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18449 +          %end;
18450 +          %else %do;
18451 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18452 +          %end;
18453 +        end;
18454 +        else if last.node then do;
18455 +          %if &validFlag eq N %then %do;
18456 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18457 +          %end;
18458 +          %else %do;
18459 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18460 +          %end;
18461 +          output;
18462 +        end;
18463 +        else do;
18464 +          %if &validFlag eq N %then %do;
18465 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18466 +          %end;
18467 +          %else %do;
18468 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18469 +          %end;
18470 +        end;
18471 +      %end;
18472 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18473 +        if strip(CATEGORY) = "&targetevent" then do;
18474 +          %if &validFlag eq N %then %do;
18475 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18476 +          %end;
18477 +          %else %do;
18478 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18479 +          %end;
18480 +          output;
18481 +        end;
18482 +      %end;
18483 +      %else %if "&probtype" eq "NONE" %then %do;
18484 +        if last.node then do;
18485 +          output;
18486 +        end;
18487 +      %end;
18488 +    run;
18489 +  %end;
18491 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18493 +  %let oldexists=0;
18494 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18495 +     data old_tree_plot;
18496 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18497 +        rename nodecolor=oldnodecolor;
18498 +     run;
18500 +     proc sort data=old_tree_plot;
18501 +        by node;
18502 +     run;
18504 +     %let oldexists=1;
18505 +  %end;
18507 +  data &EM_USER_TREE_PLOT;
18508 +    length textall $800;
18509 +    merge tempoutnodes temptargetused
18511 +    %if &em_intTarget eq Y %then %do;
18512 +      tempinterval
18513 +    %end;
18515 +    %if &em_classTarget eq Y %then %do;
18517 +      %if &validFlag eq N %then %do;
18518 +        tempn(rename=(statvalue=N))
18519 +      %end;
18520 +      %else %do;
18521 +        tempn
18522 +      %end;
18524 +      temppredict tempprob
18526 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18527 +        tempprofittext
18528 +      %end;
18529 +    %end;
18530 +    ;
18531 +    by node;
18533 +    /* build nodetext based on user selection */
18534 +    textall="";
18536 +    %if &em_intTarget eq Y %then %do;
18537 +    if tarlevel="INTERVAL" then do;
18538 +      /* Nodeid */
18539 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18540 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18541 +      %end;
18543 +      /* Target identifier if multiple targets are used */
18544 +      %if "&multipleTar" eq "Y" %then %do;
18545 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18546 +      %end;
18548 +      %if &validFlag eq Y %then %do;
18549 +         /* Column labels displayed in validflag eq Y only */
18550 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18551 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18551!+noquote ))";
18552 +         %end;
18554 +         /* Average values */
18555 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18556 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18557 +         %end;
18559 +         /* RASE */
18560 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18561 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18562 +         %end;
18564 +         /* Count */
18565 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18566 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18567 +         %end;
18568 +      %end;
18569 +      %else %do;
18570 +         /* Average values */
18571 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18572 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18573 +         %end;
18575 +         /* RASE */
18576 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18577 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18578 +         %end;
18580 +         /* Count */
18581 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18582 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18583 +         %end;
18584 +      %end;
18586 +      /* nodecolor */
18587 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18588 +        nodecolor=PREDICTION;
18589 +      %end;
18590 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18591 +        nodecolor=RASE;
18592 +      %end;
18593 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18594 +        nodecolor=1;
18595 +      %end;
18597 +    end;
18598 +    %end;
18599 +    %if &em_classTarget eq Y %then %do;
18600 +    if tarlevel^="INTERVAL" then  do;
18602 +      /* Nodeid */
18603 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18604 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18605 +      %end;
18606 +      /* Target identifier if multiple targets are used */
18607 +      %if "&multipleTar" eq "Y" %then %do;
18608 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18609 +      %end;
18611 +      /* Predicted values */
18612 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18613 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18614 +      %end;
18616 +      /* Column labels displayed in validflag eq Y only */
18617 +      %if "&ValidFlag" eq "Y" %then %do;
18618 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18619 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18619!+noquote ))";
18620 +        %end;
18621 +      %end;
18623 +      /* Target Values */
18624 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18625 +        textall=strip(textall)||"0A"x||strip(probtext);
18626 +      %end;
18628 +      /* include profit or loss for all target levels */
18629 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18630 +        textall=strip(textall)||"0A"x||strip(profittext);
18631 +      %end;
18633 +      %if &validFlag eq N %then %do;
18634 +        /* Percent Correct */
18635 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18636 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18637 +        %end;
18639 +         /* Count */
18640 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18641 +          %if "&adjusted" eq "N" %then %do;
18642 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18643 +          %end;
18644 +          %else %do;
18645 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18646 +          %end;
18647 +         %end;
18648 +      %end;
18649 +      %else %do;
18650 +        /* Percent Correct */
18651 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18652 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18653 +        %end;
18655 +         /* Count */
18656 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18657 +          %if "&adjusted" eq "N" %then %do;
18658 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18659 +          %end;
18660 +          %else %do;
18661 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18662 +          %end;
18663 +         %end;
18664 +      %end;
18666 +      /* nodecolor */
18667 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18668 +       %if &multipleTar ne Y %then %do;
18669 +        nodecolor=&predTarget;
18670 +       %end;
18671 +       %else %do;
18672 +         nodecolor=percentcorrect;
18673 +       %end;
18674 +      %end;
18675 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18676 +        nodecolor=percentcorrect;
18677 +      %end;
18678 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18679 +        nodecolor=1;
18680 +      %end;
18681 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18682 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18683 +          nodecolor=percentcorrect;
18684 +        %end;
18685 +        %else %do;
18686 +          nodecolor=profitloss;
18687 +        %end;
18688 +      %end;
18690 +    end;
18691 +    %end;
18692 +    %if &em_intTarget eq Y %then %do;
18693 +     drop  PREDICTION  TARGET TARLEVEL
18694 +     %if &ValidFlag eq Y %then %do;
18695 +         VPREDICTION
18696 +     %end;
18697 +     ;
18698 +    %end;
18699 +    %if &em_classTarget eq Y %then %do;
18700 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18701 +     %if &ValidFlag eq Y %then %do;
18702 +         VSTATVALUE
18703 +     %end;
18704 +     ;
18705 +    %end;
18707 +  run;
18709 +  /* add leaf index information to plotds - based on primary target only*/
18710 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18711 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18712 +      set &EM_USER_OUTSTATS;
18713 +      if ((statname="PROBABILITY"
18714 +      %if &validexist %then %do;
18715 +       or statname="VALID: PROBABILITY"
18716 +      %end;
18717 +      ) AND (CATEGORY="&TARGETEVENT")
18718 +      %if "&multipleTar" eq "Y" %then %do;
18719 +        AND (Target="%EM_TARGET")
18720 +      %end;
18721 +      );
18722 +    run;
18724 +    %if &validexist %then %do;
18725 +      proc sort data=tempprob; by node; run;
18726 +      %let vpredTarget = V%substr(&predTarget, 2);
18727 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18728 +         by node;
18729 +         id statname;
18730 +      run;
18731 +    %end;
18732 +  %end;
18733 +  %else %do;
18734 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18735 +      set &EM_USER_OUTSTATS;
18736 +      if ((statname="PREDICTION"
18737 +      %if &validexist %then %do;
18738 +       or statname="VALID: PREDICTION"
18739 +      %end;
18740 +      )
18741 +      %if "&multipleTar" eq "Y" %then %do;
18742 +        AND (Target="%EM_TARGET")
18743 +      %end;
18744 +      );
18745 +    run;
18746 +    %if &validexist %then %do;
18747 +      proc sort data=tempprob; by node; run;
18748 +      %let vpredTarget = V%substr(&predTarget, 2);
18749 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
18750 +         by node;
18751 +         id statname;
18752 +      run;
18753 +    %end;
18754 +  %end;
18756 +  proc sort data=tempprob; by node; run;
18757 +  data tempoutnodes;
18758 +    merge tempoutnodes tempprob;
18759 +    by node;
18760 +  run;
18762 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
18763 +  data tempnodes;
18764 +    retain traintotal validtotal;
18765 +    set tempnodes(where=(leaf ne . ));
18766 +    tprob=round(&predTarget, .01);
18767 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18768 +      percevent_train=round(tprob*100, .01);
18769 +    %end;
18770 +    %else %do;
18771 +      percevent_train=tprob;
18772 +    %end;
18774 +    perc_train=round((n/traintotal)*100, 0.01);
18775 +    /* leafwidth already has a *10 multiplier */
18776 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
18778 +    %if &validexist %then %do;
18779 +      %let vpredTarget = V%substr(&predTarget,2);
18780 +      vprob=round(&vpredTarget, .01);
18781 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18782 +        percevent_valid=round(vprob*100, .01);
18783 +      %end;
18784 +      %else %do;
18785 +        percevent_valid=vprob;
18786 +      %end;
18787 +      perc_valid=round((vn/validtotal)*100, .01);
18788 +    %end;
18790 +    index=_N_;
18791 +    keep node index tprob perc_train percevent_train
18792 +    %if &validexist %then %do;
18793 +        vprob percevent_valid perc_valid
18794 +    %end;
18795 +    ;
18796 +  run;
18797 +  proc sort data=tempnodes; by node; run;
18798 +  data &EM_USER_TREE_PLOT;
18799 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
18800 +    by node;
18801 +    if missing(node) then delete;
18802 +    %if &oldexists %then %do;
18803 +      if missing(nodecolor) then nodecolor=oldnodecolor;
18804 +      drop oldnodecolor;
18805 +    %end;
18806 +    abovetext = compbl(abovetext);
18808 +    /* add variable labels */
18809 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
18810 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
18811 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
18812 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
18813 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
18814 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
18816 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18817 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
18818 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
18819 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18820 +          %end;
18821 +          %else %do;
18822 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
18823 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
18824 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18825 +          %end;
18826 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
18828 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
18829 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
18830 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18831 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
18832 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18833 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
18834 +          %end;
18835 +          %else %do;
18836 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
18837 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18838 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
18839 +          %end;
18840 +    ;
18841 +  run;
18843 +  /* delete temporary tables */
18844 +  proc datasets lib=work nolist;
18845 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
18846 +  run;
18848 +%mend em_tree_makePlotDs;
18852 +%macro em_tree_report;
18854 +   /* report properties */
18855 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
18856 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
18857 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
18858 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
18859 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
18860 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
18861 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
18862 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
18863 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
18864 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
18865 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
18866 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
18867 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
18869 +   %let validexist=0;
18870 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
18871 +     %let validexist=1;
18872 +   %end;
18874 +   /* determine if multiple targets will be processed */
18875 +   %let em_tree_multipleTargets=N;
18876 +   %let em_tree_numTarget=1;
18877 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18878 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18879 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18880 +         %let em_tree_multipleTargets=N;
18881 +      %end;
18882 +      %else %do;
18883 +        data _null_;
18884 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18885 +          if eof then
18886 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18887 +        run;
18889 +        %if &em_tree_numTarget gt 1 %then %do;
18890 +           %let em_tree_multipleTargets=Y;
18891 +        %end;
18892 +     %end;
18893 +   %end;
18895 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
18897 +   /* variable importance */
18898 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
18899 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
18901 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
18902 +     /* and the columns may not be generated                                                                                 */
18903 +     %let em_tree_cvexists=;
18904 +     %let em_tree_surrexists=.;
18905 +     data _null_;
18906 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
18907 +       if eof then do ;
18908 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
18909 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
18910 +       end;
18911 +     run;
18913 +     data &EM_USER_OUTIMPORT;
18914 +         set &EM_USER_OUTIMPORT;
18915 +         /* format columns based on Precison value specified */
18916 +         format importance 15.&EM_PROPERTY_PRECISION
18917 +              %if &validexist %then %do;
18918 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
18919 +              %end;
18920 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
18921 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
18922 +              %end;
18923 +         ;
18924 +     run;
18926 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
18927 +     proc print data=&EM_USER_OUTIMPORT
18928 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
18929 +          (where=((nrules>0) OR (nsurrogates>0)))
18930 +        %end;
18931 +        %else %do;
18932 +           (where=(nrules>0))
18933 +        %end;
18934 +        label noobs
18935 +        ;
18936 +     run;
18937 +     title10;
18939 +   %end;
18941 +   /* Sequence */
18942 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
18943 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
18944 +   data _null_ ;
18945 +      set &EM_USER_outseq (obs=2) end=eof ;
18946 +      if eof then do ;
18947 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
18948 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
18949 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
18950 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
18951 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
18952 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
18953 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
18954 +      end;
18955 +    run;
18957 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
18958 +      data &EM_USER_OUTSEQ;
18959 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
18960 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
18961 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18962 +           _XMISC_=_VMISC_
18963 +        %end;
18964 +        %if "&em_tree_aprof" ne "."  %then %do;
18965 +           _XAPROF_=_VAPROF_
18966 +           _XPROF_ = _VPROF_
18967 +        %end;
18968 +        %if "&em_tree_aloss" ne "."  %then %do;
18969 +           _XALOSS_=_VALOSS_
18970 +        %end;
18971 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
18972 +           _XPASE_ = _VPASE_
18973 +           _XPMISC_ = _VPMISC_
18974 +        %end;
18976 +        ));
18977 +     %end;
18978 +     %else %do;
18979 +        set &EM_USER_OUTSEQ;
18980 +     %end;
18982 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
18983 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18984 +            _MISC_   15.&EM_PROPERTY_PRECISION
18985 +         %end;
18986 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
18987 +            _PASE_  15.&EM_PROPERTY_PRECISION
18988 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
18989 +         %end;
18990 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
18991 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
18992 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18993 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18994 +            %end;
18995 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
18996 +              _VPASE_  15.&EM_PROPERTY_PRECISION
18997 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
18998 +            %end;
18999 +         %end;
19000 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19001 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19002 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19003 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19004 +            %end;
19005 +         %end;
19006 +         %if "&em_tree_seq" ne "." %then %do;
19007 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19008 +         %end;
19009 +         %if "&em_tree_vseq" ne "." %then %do;
19010 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19011 +         %end;
19012 +         %if "&em_tree_aprof" ne "." %then %do;
19013 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19014 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19015 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19016 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19017 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19018 +           %end;
19019 +         %end;
19020 +         %else %if "&em_tree_aloss" ne "." %then %do;
19021 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19022 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19023 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19024 +           %end;
19025 +         %end;
19026 +      ;
19027 +    run;
19028 +   %end;
19030 +   /* Observation Based Importance */
19031 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19033 +      /* need to check for 0 obs */
19034 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19035 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19036 +      %let rc=%sysfunc(close(&dsid));
19038 +      %if &onobs %then %do;
19039 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19040 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19042 +         data &EM_USER_OUTOBSIMP;
19043 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19044 +           if _a;
19045 +           by _INPUT1_;
19046 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19047 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19048 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19049 +                   %end;
19050 +                   ;
19051 +         run;
19052 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19053 +      %end;
19054 +   %end;
19056 +  %end;
19058 +  /* create dataset to support tree diagram and icicle plot */
19059 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19060 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19062 +  /* display tree diagram */
19063 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19064 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19066 +  /* display icicle diagram */
19067 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19068 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19070 +  /* Leaf Statistics Plot */
19071 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19073 +  /* print leaf information to output window */
19074 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19076 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19077 +       by descending N;
19078 +     run;
19080 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19081 +     %local vn;
19082 +     data _null_;
19083 +       set t (obs=2) end=eof;
19084 +       if eof then do;
19085 +         call symput("vn", strip(put(vn, best.)));
19086 +       end;
19087 +     run;
19089 +     data t;
19090 +       set t;
19091 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19092 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19093 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19094 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19095 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19096 +       %end;
19097 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19098 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19099 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19100 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19101 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19102 +          %end;
19103 +       %end;
19104 +       ;
19105 +     run;
19107 +     /* determine if rase is found in t */
19108 +    %let dsid=%sysfunc(open(t,i));
19109 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19110 +    %let rc=%sysfunc(close(&dsid));
19112 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19113 +     proc print data=t noobs label;
19114 +       where tprob ne .;
19115 +       var node depth N tprob
19116 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19117 +         %if "&vn" ne "." %then %do;
19118 +           VN
19119 +         %end;
19120 +         vprob
19121 +       %end;
19122 +       %if &raseexists %then %do;
19123 +            RASE
19124 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19125 +              VRASE
19126 +            %end;
19127 +       %end;
19128 +       ;
19129 +     run;
19130 +     title10;
19131 +  %end;
19133 +  /* create plots that are done during training of node */
19134 +  /* display iterative plot, including reference line */
19135 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19136 +   /* %if &nleaves eq  %then %do; */
19137 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19138 +      data _null_;
19139 +        set &EM_USER_OUTTOPOLOGY end=eof;
19140 +        if eof then do;
19141 +          call symput('nleaves', LEAF);
19142 +        end;
19143 +      run;
19144 +   /* %end; */
19146 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19147 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19148 +  %end;
19150 +  /* display leaf statistics */
19151 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19153 +  /* stats by node if multiple targets = Y */
19154 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19155 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19156 +    data &EM_USER_OUTSTATS;
19157 +      set &EM_USER_OUTSTATS;
19159 +     * if STATNAME="TARGET" then delete;
19160 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19161 +      drop leaf;
19162 +    run;
19163 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19165 +  %end;
19166 +  %else %do;
19167 +    /* add outstats and outdescribe to spk but not results */
19168 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19169 +  %end;
19171 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TRADE_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TRADE_FLAG_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='SELL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 1 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 1 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 9 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 9 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 118 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 28 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 63 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 63 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 56 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 63 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 63 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 63 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 63 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 63 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 21 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: There were 21 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 7 observations read from the data set WORK.TEMPN.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 7 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 7 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 7 observations and 40 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 7 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19172
19173  *------------------------------------------------------------*;
19174  * End REPORT: Tree;
19175  *------------------------------------------------------------*;
 
19176  /* Reset EM Options */
19177  options formchar="|----|+|---+=|-/\<>*";
19178  options nocenter ls=256 ps=10000;
19179  goptions reset=all device=GIF NODISPLAY;
 
19180  proc sort data=WORK.EM_USER_REPORT;
19181  by ID VIEW;
19182  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19183  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19184  by NAME;
19185  run;
 
NOTE: There were 15 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 15 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19186  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19187  by NAME;
19188  run;
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 15 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19189  data WORK.ASSESS_META;
19190  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19191  by NAME;
19192  run;
 
NOTE: There were 15 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 15 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 15 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19193  data EM_temp_assessMeta;
19194  set EMWS1.Tree_CMeta_TRAIN;
19195  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19196  run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19197  data EM_temp_assessdata;
19198  set EMWS1.Tree_TRAIN(keep=
19199  F_trade_flag
19200  I_trade_flag
19201  P_trade_flagbuy
19202  P_trade_flaghold
19203  P_trade_flagsell
19204  Q_trade_flagbuy
19205  Q_trade_flaghold
19206  Q_trade_flagsell
19207  R_trade_flagbuy
19208  R_trade_flaghold
19209  R_trade_flagsell
19210  U_trade_flag
19211  V_trade_flagbuy
19212  V_trade_flaghold
19213  V_trade_flagsell
19214  _WARN_
19215  trade_flag
19216  );
19217  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 135 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 135 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 135 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23498   data EM_temp_assessMeta;
23499   set EMWS1.Tree_CMeta_TRAIN;
23500   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23501   run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23502   data EM_temp_assessdata;
23503   set EMWS1.Tree_VALIDATE(keep=
23504   F_trade_flag
23505   I_trade_flag
23506   P_trade_flagbuy
23507   P_trade_flaghold
23508   P_trade_flagsell
23509   Q_trade_flagbuy
23510   Q_trade_flaghold
23511   Q_trade_flagsell
23512   R_trade_flagbuy
23513   R_trade_flaghold
23514   R_trade_flagsell
23515   U_trade_flag
23516   V_trade_flagbuy
23517   V_trade_flaghold
23518   V_trade_flagsell
23519   _WARN_
23520   trade_flag
23521   );
23522   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 61 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 61 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 61 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
27812   %let _cn = %sysfunc(getoption(CENTER));
27813   options nocenter;
27814   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
27815   var STAT LABEL TRAIN
27816   VALIDATE
27817   ;
27818   by TARGET TARGETLABEL;
27819   title9 ' ';
27820   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
27821   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
27822   title10;
27823   options &_cn;
 
27824   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
27825   by DATAROLE TARGET TARGETLABEL;
27826   run;
 
NOTE: There were 9 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 9 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27827   %let _cn = %sysfunc(getoption(CENTER));
27828   options nocenter;
27829   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
27830   var from into pct_row pct_col count percent
27831   ;
27832   by DATAROLE TARGET TARGETLABEL;
27833   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
27834   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
27835   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
27836   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
27837   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
27838   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
27839   where _TYPE_='PREDICTION';
27840   title9 ' ';
27841   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
27842   run;
 
NOTE: There were 9 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
27843   title9;
27844   title10;
27845   options &_cn;
 
27846   %let _cn = %sysfunc(getoption(CENTER));
27847   options nocenter;
27848   data EMWS1.Tree_EMEVENTREPORT;
27849   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
27849 !  8;
27850   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
27850 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
27850 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
27850 ! FALSEEVENT
27851   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
27851 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
27851 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
27852      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
27853   FALSEEVENT=0;
27854   FALSENEVENT=0;
27855   TRUEEVENT=0;
27856   TRUENEVENT=0;
27857   set EMWS1.Tree_EMEVENTREPORT;
27858   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27859   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
27860   title9 ' ';
27861   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
27862   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
27863   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27864   title10;
27865   options &_cn;
 
27866   proc datasets library=EMWS1 nolist;
27867   modify Tree_EMRANK;
27868   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
27869   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
27870   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
27871   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27872   %let _cn = %sysfunc(getoption(CENTER));
27873   options nocenter;
27874   proc print data=EMWS1.Tree_EMRANK label noobs;
27875   var
27876   decile gain lift liftc resp respc N _meanP_;
27877   by
27878   notsorted DATAROLE
27879   notsorted TARGET
27880   notsorted TARGETLABEL
27881   ;
27882   title9 ' ';
27883   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
27884   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27885   title10;
27886   options &_cn;
 
27887   proc datasets library=EMWS1 nolist;
27888   modify Tree_EMSCOREDIST;
27889   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
27890   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
27891   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
27892   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
